+ NGPUS=4
+ PY_ARGS='--cfg_file cfgs/lyft_models/pointrcnn_hindsight_p2_2staged_finetune.yaml --pretrained_model ../output/ithaca365_models/pointrcnn_hindsight_p2_2staged_train_pt2/default/ckpt/checkpoint_epoch_60.pth --wandb_project pointrcnn_hindsight_p2_2staged_finetune'
+ true
+ PORT=45744
++ nc -z 127.0.0.1 45744
++ echo 1
+ status=1
+ '[' 1 '!=' 0 ']'
+ break
+ echo 45744
45744
+ python -m torch.distributed.launch --nproc_per_node=4 --rdzv_endpoint=localhost:45744 train.py --launcher pytorch --cfg_file cfgs/lyft_models/pointrcnn_hindsight_p2_2staged_finetune.yaml --pretrained_model ../output/ithaca365_models/pointrcnn_hindsight_p2_2staged_train_pt2/default/ckpt/checkpoint_epoch_60.pth --wandb_project pointrcnn_hindsight_p2_2staged_finetune
/home/tz98/anaconda3/envs/continual-da/lib/python3.8/site-packages/torch/distributed/launch.py:163: DeprecationWarning: The 'warn' method is deprecated, use 'warning' instead
  logger.warn(
The module torch.distributed.launch is deprecated and going to be removed in future.Migrate to torch.distributed.run
WARNING:torch.distributed.run:--use_env is deprecated and will be removed in future releases.
 Please read local_rank from `os.environ('LOCAL_RANK')` instead.
INFO:torch.distributed.launcher.api:Starting elastic_operator with launch configs:
  entrypoint       : train.py
  min_nodes        : 1
  max_nodes        : 1
  nproc_per_node   : 4
  run_id           : none
  rdzv_backend     : static
  rdzv_endpoint    : localhost:45744
  rdzv_configs     : {'rank': 0, 'timeout': 900}
  max_restarts     : 3
  monitor_interval : 5
  log_dir          : None
  metrics_cfg      : {}

INFO:torch.distributed.elastic.agent.server.local_elastic_agent:log directory set to: /tmp/torchelastic_k2_al_2u/none_hj1_jvgb
INFO:torch.distributed.elastic.agent.server.api:[default] starting workers for entrypoint: python
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous'ing worker group
/home/tz98/anaconda3/envs/continual-da/lib/python3.8/site-packages/torch/distributed/elastic/utils/store.py:52: FutureWarning: This is an experimental API and will be changed in future.
  warnings.warn(
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous complete for workers. Result:
  restart_count=0
  master_addr=localhost
  master_port=45744
  group_rank=0
  group_world_size=1
  local_ranks=[0, 1, 2, 3]
  role_ranks=[0, 1, 2, 3]
  global_ranks=[0, 1, 2, 3]
  role_world_sizes=[4, 4, 4, 4]
  global_world_sizes=[4, 4, 4, 4]

INFO:torch.distributed.elastic.agent.server.api:[default] Starting worker group
INFO:torch.distributed.elastic.multiprocessing:Setting worker0 reply file to: /tmp/torchelastic_k2_al_2u/none_hj1_jvgb/attempt_0/0/error.json
INFO:torch.distributed.elastic.multiprocessing:Setting worker1 reply file to: /tmp/torchelastic_k2_al_2u/none_hj1_jvgb/attempt_0/1/error.json
INFO:torch.distributed.elastic.multiprocessing:Setting worker2 reply file to: /tmp/torchelastic_k2_al_2u/none_hj1_jvgb/attempt_0/2/error.json
INFO:torch.distributed.elastic.multiprocessing:Setting worker3 reply file to: /tmp/torchelastic_k2_al_2u/none_hj1_jvgb/attempt_0/3/error.json
2023-03-01 13:39:32,098   INFO  **********************Start logging**********************
2023-03-01 13:39:32,098   INFO  CUDA_VISIBLE_DEVICES=0,1,2,3
2023-03-01 13:39:32,098   INFO  total_batch_size: 8
2023-03-01 13:39:32,098   INFO  cfg_file         cfgs/lyft_models/pointrcnn_hindsight_p2_2staged_finetune.yaml
2023-03-01 13:39:32,098   INFO  batch_size       2
2023-03-01 13:39:32,098   INFO  epochs           10
2023-03-01 13:39:32,098   INFO  workers          4
2023-03-01 13:39:32,098   INFO  extra_tag        default
2023-03-01 13:39:32,098   INFO  ckpt             None
2023-03-01 13:39:32,098   INFO  pretrained_model ../output/ithaca365_models/pointrcnn_hindsight_p2_2staged_train_pt2/default/ckpt/checkpoint_epoch_60.pth
2023-03-01 13:39:32,098   INFO  launcher         pytorch
2023-03-01 13:39:32,099   INFO  tcp_port         18888
2023-03-01 13:39:32,099   INFO  sync_bn          False
2023-03-01 13:39:32,099   INFO  fix_random_seed  False
2023-03-01 13:39:32,099   INFO  ckpt_save_interval 10
2023-03-01 13:39:32,099   INFO  local_rank       0
2023-03-01 13:39:32,099   INFO  max_ckpt_save_num 30
2023-03-01 13:39:32,099   INFO  merge_all_iters_to_one_epoch False
2023-03-01 13:39:32,099   INFO  set_cfgs         None
2023-03-01 13:39:32,099   INFO  empty_cache_every -1
2023-03-01 13:39:32,099   INFO  max_waiting_mins 0
2023-03-01 13:39:32,099   INFO  start_epoch      0
2023-03-01 13:39:32,099   INFO  num_epochs_to_eval 0
2023-03-01 13:39:32,099   INFO  save_to_file     False
2023-03-01 13:39:32,099   INFO  wandb_project    pointrcnn_hindsight_p2_2staged_finetune
2023-03-01 13:39:32,099   INFO  wandb_group      None
2023-03-01 13:39:32,100   INFO  hq_path          None
2023-03-01 13:39:32,100   INFO  cfg.ROOT_DIR: /home/tz98/projects/continual-DA/downstream/OpenPCDet
2023-03-01 13:39:32,100   INFO  cfg.LOCAL_RANK: 0
2023-03-01 13:39:32,100   INFO  cfg.CLASS_NAMES: ['Car', 'Pedestrian']
2023-03-01 13:39:32,100   INFO  
cfg.DATA_CONFIG = edict()
2023-03-01 13:39:32,100   INFO  cfg.DATA_CONFIG.DATASET: KittiDataset
2023-03-01 13:39:32,100   INFO  cfg.DATA_CONFIG.DATA_PATH: ../data/lyft
2023-03-01 13:39:32,100   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [0, -40, -3, 90.4, 40, 1]
2023-03-01 13:39:32,100   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2023-03-01 13:39:32,100   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2023-03-01 13:39:32,100   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2023-03-01 13:39:32,100   INFO  
cfg.DATA_CONFIG.INFO_PATH = edict()
2023-03-01 13:39:32,100   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['kitti_infos_train.pkl']
2023-03-01 13:39:32,100   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['kitti_infos_val.pkl']
2023-03-01 13:39:32,101   INFO  
cfg.DATA_CONFIG.LOAD_HISTORY = edict()
2023-03-01 13:39:32,101   INFO  cfg.DATA_CONFIG.LOAD_HISTORY.DATA_PATH: ../data/lyft/training/combined_lidar
2023-03-01 13:39:32,101   INFO  cfg.DATA_CONFIG.LOAD_HISTORY.LIMIT_NUM: 5
2023-03-01 13:39:32,101   INFO  cfg.DATA_CONFIG.LOAD_HISTORY.TRANS_MAT_PATH: ../data/lyft/training/trans_mat
2023-03-01 13:39:32,101   INFO  cfg.DATA_CONFIG.LOAD_HISTORY.VOXEL_SIZE: -1
2023-03-01 13:39:32,101   INFO  cfg.DATA_CONFIG.LOAD_HISTORY.FORWARD_ONLY: True
2023-03-01 13:39:32,101   INFO  cfg.DATA_CONFIG.LOAD_HISTORY.CACHE_ROOT: /scratch/hindsight_travis_cache/
2023-03-01 13:39:32,101   INFO  cfg.DATA_CONFIG.LOAD_HISTORY.HISTORY_AUG: True
2023-03-01 13:39:32,101   INFO  cfg.DATA_CONFIG.GET_ITEM_LIST: ['points', 'p2_score', 'history_scans']
2023-03-01 13:39:32,101   INFO  cfg.DATA_CONFIG.FOV_POINTS_ONLY: True
2023-03-01 13:39:32,101   INFO  
cfg.DATA_CONFIG.DATA_AUGMENTOR = edict()
2023-03-01 13:39:32,101   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2023-03-01 13:39:32,101   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'gt_sampling', 'USE_ROAD_PLANE': True, 'DB_INFO_PATH': ['kitti_dbinfos_train.pkl'], 'PREPARE': {'filter_by_min_points': ['Car:5', 'Pedestrian:5', 'Cyclist:5'], 'filter_by_difficulty': []}, 'VALIDATE_NUM_POINT_LIMIT': {'Car': 10, 'Pedestrian': 3, 'Cyclist': 3}, 'SAMPLE_GROUPS': ['Car:10', 'Pedestrian:5', 'Cyclist:5'], 'VALIDATE_EXTRA_OFFSET': [0.0, 0.0, 0.2], 'VALIDATE_EXTRA_WIDTH': [0.3, 0.3, 0.5], 'NUM_POINT_FEATURES': 4, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, 0.0], 'LIMIT_WHOLE_SCENE': True}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x']}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}, {'NAME': 'point_quantize', 'VOXEL_SIZE': 0.3}]
2023-03-01 13:39:32,102   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2023-03-01 13:39:32,102   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2023-03-01 13:39:32,102   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity']
2023-03-01 13:39:32,102   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity']
2023-03-01 13:39:32,102   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'sample_points', 'NUM_POINTS': {'train': 16384, 'test': 16384}}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}]
2023-03-01 13:39:32,102   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/lyft_dataset_hindsight.yaml
2023-03-01 13:39:32,102   INFO  cfg.DATA_CONFIG.load_p2_score: /home/yy785/datasets/lyft_release_test/training/pp_score_fw70_2m_r0.3
2023-03-01 13:39:32,102   INFO  cfg.DATA_CONFIG.load_p2_test_score: /home/yy785/datasets/lyft_release_test/training/pp_score_fw70_2m_r0.3_test
2023-03-01 13:39:32,102   INFO  
cfg.MODEL = edict()
2023-03-01 13:39:32,102   INFO  cfg.MODEL.NAME: PointRCNN
2023-03-01 13:39:32,102   INFO  
cfg.MODEL.HISTORY_QUERY = edict()
2023-03-01 13:39:32,102   INFO  cfg.MODEL.HISTORY_QUERY.NAME: SparseResUQueryNet
2023-03-01 13:39:32,102   INFO  cfg.MODEL.HISTORY_QUERY.history_backbone: Res16UNet14E
2023-03-01 13:39:32,102   INFO  
cfg.MODEL.HISTORY_QUERY.history_backbone_config = edict()
2023-03-01 13:39:32,103   INFO  cfg.MODEL.HISTORY_QUERY.history_backbone_config.bn_momentum: 0.05
2023-03-01 13:39:32,103   INFO  cfg.MODEL.HISTORY_QUERY.history_backbone_config.conv1_kernel_size: 3
2023-03-01 13:39:32,103   INFO  cfg.MODEL.HISTORY_QUERY.history_backbone_config.final_feature_size: 64
2023-03-01 13:39:32,103   INFO  cfg.MODEL.HISTORY_QUERY.simple_conv_kernel_size: 5
2023-03-01 13:39:32,103   INFO  cfg.MODEL.HISTORY_QUERY.extra_conv: False
2023-03-01 13:39:32,103   INFO  cfg.MODEL.HISTORY_QUERY.mode: update_point_features
2023-03-01 13:39:32,103   INFO  
cfg.MODEL.HISTORY_QUERY.P2_LOSS_CONFIG = edict()
2023-03-01 13:39:32,103   INFO  cfg.MODEL.HISTORY_QUERY.P2_LOSS_CONFIG.LOSS_FN: l1
2023-03-01 13:39:32,103   INFO  cfg.MODEL.HISTORY_QUERY.TWO_STAGE: pt1
2023-03-01 13:39:32,103   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2023-03-01 13:39:32,103   INFO  cfg.MODEL.BACKBONE_3D.NAME: PointNet2MSG
2023-03-01 13:39:32,103   INFO  
cfg.MODEL.BACKBONE_3D.SA_CONFIG = edict()
2023-03-01 13:39:32,103   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.NPOINTS: [4096, 1024, 256, 64]
2023-03-01 13:39:32,103   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.RADIUS: [[0.1, 0.5], [0.5, 1.0], [1.0, 2.0], [2.0, 4.0]]
2023-03-01 13:39:32,103   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.NSAMPLE: [[16, 32], [16, 32], [16, 32], [16, 32]]
2023-03-01 13:39:32,104   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.MLPS: [[[16, 16, 32], [32, 32, 64]], [[64, 64, 128], [64, 96, 128]], [[128, 196, 256], [128, 196, 256]], [[256, 256, 512], [256, 384, 512]]]
2023-03-01 13:39:32,104   INFO  cfg.MODEL.BACKBONE_3D.FP_MLPS: [[128, 128], [256, 256], [512, 512], [512, 512]]
2023-03-01 13:39:32,104   INFO  
cfg.MODEL.POINT_HEAD = edict()
2023-03-01 13:39:32,104   INFO  cfg.MODEL.POINT_HEAD.NAME: PointHeadBox
2023-03-01 13:39:32,104   INFO  cfg.MODEL.POINT_HEAD.CLS_FC: [256, 256]
2023-03-01 13:39:32,104   INFO  cfg.MODEL.POINT_HEAD.REG_FC: [256, 256]
2023-03-01 13:39:32,104   INFO  cfg.MODEL.POINT_HEAD.CLASS_AGNOSTIC: False
2023-03-01 13:39:32,104   INFO  cfg.MODEL.POINT_HEAD.USE_POINT_FEATURES_BEFORE_FUSION: False
2023-03-01 13:39:32,104   INFO  
cfg.MODEL.POINT_HEAD.TARGET_CONFIG = edict()
2023-03-01 13:39:32,104   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.GT_EXTRA_WIDTH: [0.2, 0.2, 0.2]
2023-03-01 13:39:32,104   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.BOX_CODER: PointResidualCoder
2023-03-01 13:39:32,104   INFO  
cfg.MODEL.POINT_HEAD.TARGET_CONFIG.BOX_CODER_CONFIG = edict()
2023-03-01 13:39:32,104   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.BOX_CODER_CONFIG.use_mean_size: True
2023-03-01 13:39:32,105   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.BOX_CODER_CONFIG.mean_size: [[3.9, 1.6, 1.56], [0.8, 0.6, 1.73], [1.76, 0.6, 1.73]]
2023-03-01 13:39:32,105   INFO  
cfg.MODEL.POINT_HEAD.LOSS_CONFIG = edict()
2023-03-01 13:39:32,105   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_REG: WeightedSmoothL1Loss
2023-03-01 13:39:32,105   INFO  
cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2023-03-01 13:39:32,105   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.point_cls_weight: 1.0
2023-03-01 13:39:32,105   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.point_box_weight: 1.0
2023-03-01 13:39:32,105   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2023-03-01 13:39:32,105   INFO  
cfg.MODEL.ROI_HEAD = edict()
2023-03-01 13:39:32,105   INFO  cfg.MODEL.ROI_HEAD.NAME: PointRCNNHead
2023-03-01 13:39:32,105   INFO  cfg.MODEL.ROI_HEAD.CLASS_AGNOSTIC: True
2023-03-01 13:39:32,105   INFO  
cfg.MODEL.ROI_HEAD.ROI_POINT_POOL = edict()
2023-03-01 13:39:32,105   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.POOL_EXTRA_WIDTH: [0.0, 0.0, 0.0]
2023-03-01 13:39:32,105   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.NUM_SAMPLED_POINTS: 512
2023-03-01 13:39:32,105   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.DEPTH_NORMALIZER: 70.0
2023-03-01 13:39:32,105   INFO  cfg.MODEL.ROI_HEAD.XYZ_UP_LAYER: [128, 128]
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.CLS_FC: [256, 256]
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.REG_FC: [256, 256]
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.DP_RATIO: 0.0
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.USE_BN: False
2023-03-01 13:39:32,106   INFO  
cfg.MODEL.ROI_HEAD.SA_CONFIG = edict()
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.SA_CONFIG.NPOINTS: [128, 32, -1]
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.SA_CONFIG.RADIUS: [0.2, 0.4, 100]
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.SA_CONFIG.NSAMPLE: [16, 16, 16]
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.SA_CONFIG.MLPS: [[128, 128, 128], [128, 128, 256], [256, 256, 512]]
2023-03-01 13:39:32,106   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG = edict()
2023-03-01 13:39:32,106   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN = edict()
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_TYPE: nms_gpu
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.MULTI_CLASSES_NMS: False
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_PRE_MAXSIZE: 9000
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_POST_MAXSIZE: 512
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_THRESH: 0.8
2023-03-01 13:39:32,106   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST = edict()
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_TYPE: nms_gpu
2023-03-01 13:39:32,106   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.MULTI_CLASSES_NMS: False
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_PRE_MAXSIZE: 9000
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_POST_MAXSIZE: 100
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_THRESH: 0.85
2023-03-01 13:39:32,107   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG = edict()
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.BOX_CODER: ResidualCoder
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.ROI_PER_IMAGE: 128
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.FG_RATIO: 0.5
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.SAMPLE_ROI_BY_EACH_CLASS: True
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_SCORE_TYPE: cls
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_FG_THRESH: 0.6
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_BG_THRESH: 0.45
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_BG_THRESH_LO: 0.1
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.HARD_BG_RATIO: 0.8
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.REG_FG_THRESH: 0.55
2023-03-01 13:39:32,107   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG = edict()
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CLS_LOSS: BinaryCrossEntropy
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.REG_LOSS: smooth-l1
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CORNER_LOSS_REGULARIZATION: True
2023-03-01 13:39:32,107   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_cls_weight: 1.0
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_reg_weight: 1.0
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_corner_weight: 1.0
2023-03-01 13:39:32,107   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2023-03-01 13:39:32,107   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2023-03-01 13:39:32,107   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2023-03-01 13:39:32,107   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.1
2023-03-01 13:39:32,107   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2023-03-01 13:39:32,108   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: kitti
2023-03-01 13:39:32,108   INFO  
cfg.MODEL.POST_PROCESSING.NMS_CONFIG = edict()
2023-03-01 13:39:32,108   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: False
2023-03-01 13:39:32,108   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2023-03-01 13:39:32,108   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.1
2023-03-01 13:39:32,108   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2023-03-01 13:39:32,108   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2023-03-01 13:39:32,108   INFO  
cfg.OPTIMIZATION = edict()
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 2
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 10
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.LR: 0.01
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2023-03-01 13:39:32,108   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2023-03-01 13:39:32,108   INFO  cfg.TAG: pointrcnn_hindsight_p2_2staged_finetune
2023-03-01 13:39:32,108   INFO  cfg.EXP_GROUP_PATH: lyft_models
wandb: Currently logged in as: travis10. Use `wandb login --relogin` to force relogin
wandb: wandb version 0.13.10 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.13.5
wandb: Run data is saved locally in /home/tz98/projects/continual-DA/downstream/OpenPCDet/tools/wandb/run-20230301_133935-1bpkm1vf
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run lyft_models_pointrcnn_hindsight_p2_2staged_finetune_default
wandb: ⭐️ View project at https://wandb.ai/travis10/pointrcnn_hindsight_p2_2staged_finetune
wandb: 🚀 View run at https://wandb.ai/travis10/pointrcnn_hindsight_p2_2staged_finetune/runs/1bpkm1vf
wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /home/tz98/projects/continual-DA/downstream/OpenPCDet/output/lyft_models/pointrcnn_hindsight_p2_2staged_finetune/default/tensorboard
2023-03-01 13:39:41,620   INFO  Database filter by min points Car: 117109 => 116379
2023-03-01 13:39:41,624   INFO  Database filter by min points Pedestrian: 2931 => 2925
2023-03-01 13:39:41,644   INFO  Database filter by difficulty Car: 116379 => 116379
2023-03-01 13:39:41,644   INFO  Database filter by difficulty Pedestrian: 2925 => 2925
2023-03-01 13:39:41,665   INFO  Loading KITTI dataset
2023-03-01 13:39:42,010   INFO  Total samples for KITTI dataset: 11873
2023-03-01 13:39:44,720   INFO  ==> Loading parameters from checkpoint ../output/ithaca365_models/pointrcnn_hindsight_p2_2staged_train_pt2/default/ckpt/checkpoint_epoch_60.pth to CPU
2023-03-01 13:39:44,802   INFO  ==> Checkpoint trained from version: pcdet+0.3.0+0000000
2023-03-01 13:39:46,197   INFO  ==> Done (loaded 502/502)
2023-03-01 13:39:46,202   INFO  Freezing Detector model...
2023-03-01 13:39:46,435   INFO  DistributedDataParallel(
  (module): PointRCNN(
    (history_query): SparseResUQueryNet(
      (history_backbone): Res16UNet14E(
        (conv0p1s1): MinkowskiConvolution(in=1, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
        (bn0): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
        (conv1p1s2): MinkowskiConvolution(in=32, out=32, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
        (bn1): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
        (block1): Sequential(
          (0): BasicBlock(
            (conv1): MinkowskiConvolution(in=32, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm1): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): MinkowskiConvolution(in=32, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm2): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): MinkowskiReLU()
          )
        )
        (conv2p2s2): MinkowskiConvolution(in=32, out=32, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
        (bn2): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
        (block2): Sequential(
          (0): BasicBlock(
            (conv1): MinkowskiConvolution(in=32, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): MinkowskiReLU()
            (downsample): Sequential(
              (0): MinkowskiConvolution(in=32, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
              (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
            )
          )
        )
        (conv3p4s2): MinkowskiConvolution(in=64, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
        (bn3): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
        (block3): Sequential(
          (0): BasicBlock(
            (conv1): MinkowskiConvolution(in=64, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): MinkowskiReLU()
            (downsample): Sequential(
              (0): MinkowskiConvolution(in=64, out=128, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
              (1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
            )
          )
        )
        (conv4p8s2): MinkowskiConvolution(in=128, out=128, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
        (bn4): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
        (block4): Sequential(
          (0): BasicBlock(
            (conv1): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): MinkowskiReLU()
          )
        )
        (convtr4p16s2): MinkowskiConvolutionTranspose(in=128, out=128, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
        (bntr4): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
        (block5): Sequential(
          (0): BasicBlock(
            (conv1): MinkowskiConvolution(in=256, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): MinkowskiReLU()
            (downsample): Sequential(
              (0): MinkowskiConvolution(in=256, out=128, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
              (1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
            )
          )
        )
        (convtr5p8s2): MinkowskiConvolutionTranspose(in=128, out=96, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
        (bntr5): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
        (block6): Sequential(
          (0): BasicBlock(
            (conv1): MinkowskiConvolution(in=160, out=96, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm1): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): MinkowskiConvolution(in=96, out=96, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm2): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): MinkowskiReLU()
            (downsample): Sequential(
              (0): MinkowskiConvolution(in=160, out=96, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
              (1): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
            )
          )
        )
        (convtr6p4s2): MinkowskiConvolutionTranspose(in=96, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
        (bntr6): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
        (block7): Sequential(
          (0): BasicBlock(
            (conv1): MinkowskiConvolution(in=96, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): MinkowskiReLU()
            (downsample): Sequential(
              (0): MinkowskiConvolution(in=96, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
              (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
            )
          )
        )
        (convtr7p2s2): MinkowskiConvolutionTranspose(in=64, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
        (bntr7): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
        (block8): Sequential(
          (0): BasicBlock(
            (conv1): MinkowskiConvolution(in=96, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
            (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): MinkowskiReLU()
            (downsample): Sequential(
              (0): MinkowskiConvolution(in=96, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
              (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
            )
          )
        )
        (relu): MinkowskiReLU()
        (final): MinkowskiConvolution(in=64, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
      )
      (pool): MinkowskiMaxPooling(kernel_size=[1000, 1, 1, 1], stride=[1000, 1, 1, 1], dilation=[1, 1, 1, 1])
      (p2_backbone): Sequential(
        (0): Linear(in_features=68, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=1, bias=True)
      )
      (current_conv): MinkowskiConvolution(in=64, out=64, kernel_size=[5, 5, 5], stride=[1, 1, 1], dilation=[1, 1, 1])
    )
    (vfe): None
    (backbone_3d): PointNet2MSG(
      (SA_modules): ModuleList(
        (0): PointnetSAModuleMSG(
          (groupers): ModuleList(
            (0): QueryAndGroup()
            (1): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(67, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ReLU()
              (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (5): ReLU()
              (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (8): ReLU()
            )
            (1): Sequential(
              (0): Conv2d(67, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ReLU()
              (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (5): ReLU()
              (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (8): ReLU()
            )
          )
        )
        (1): PointnetSAModuleMSG(
          (groupers): ModuleList(
            (0): QueryAndGroup()
            (1): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ReLU()
              (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (5): ReLU()
              (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (8): ReLU()
            )
            (1): Sequential(
              (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ReLU()
              (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (5): ReLU()
              (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (8): ReLU()
            )
          )
        )
        (2): PointnetSAModuleMSG(
          (groupers): ModuleList(
            (0): QueryAndGroup()
            (1): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ReLU()
              (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (5): ReLU()
              (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (8): ReLU()
            )
            (1): Sequential(
              (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ReLU()
              (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (5): ReLU()
              (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (8): ReLU()
            )
          )
        )
        (3): PointnetSAModuleMSG(
          (groupers): ModuleList(
            (0): QueryAndGroup()
            (1): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ReLU()
              (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (5): ReLU()
              (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (8): ReLU()
            )
            (1): Sequential(
              (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ReLU()
              (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (5): ReLU()
              (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (8): ReLU()
            )
          )
        )
      )
      (FP_modules): ModuleList(
        (0): PointnetFPModule(
          (mlp): Sequential(
            (0): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
          )
        )
        (1): PointnetFPModule(
          (mlp): Sequential(
            (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
          )
        )
        (2): PointnetFPModule(
          (mlp): Sequential(
            (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
          )
        )
        (3): PointnetFPModule(
          (mlp): Sequential(
            (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
          )
        )
      )
    )
    (map_to_bev_module): None
    (pfe): None
    (backbone_2d): None
    (dense_head): None
    (point_head): PointHeadBox(
      (cls_loss_func): SigmoidFocalClassificationLoss()
      (reg_loss_func): WeightedSmoothL1Loss()
      (cls_layers): Sequential(
        (0): Linear(in_features=128, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): ReLU()
        (3): Linear(in_features=256, out_features=256, bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (5): ReLU()
        (6): Linear(in_features=256, out_features=2, bias=True)
      )
      (box_layers): Sequential(
        (0): Linear(in_features=128, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): ReLU()
        (3): Linear(in_features=256, out_features=256, bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (5): ReLU()
        (6): Linear(in_features=256, out_features=8, bias=True)
      )
    )
    (roi_head): PointRCNNHead(
      (proposal_target_layer): ProposalTargetLayer()
      (reg_loss_func): WeightedSmoothL1Loss()
      (SA_modules): ModuleList(
        (0): PointnetSAModule(
          (groupers): ModuleList(
            (0): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ReLU()
              (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (5): ReLU()
              (6): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (8): ReLU()
            )
          )
        )
        (1): PointnetSAModule(
          (groupers): ModuleList(
            (0): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ReLU()
              (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (5): ReLU()
              (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (8): ReLU()
            )
          )
        )
        (2): PointnetSAModule(
          (groupers): ModuleList(
            (0): GroupAll()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(259, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (2): ReLU()
              (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (5): ReLU()
              (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
              (8): ReLU()
            )
          )
        )
      )
      (xyz_up_layer): Sequential(
        (0): Conv2d(5, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        (3): ReLU()
      )
      (merge_down_layer): Sequential(
        (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
      )
      (cls_layers): Sequential(
        (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): ReLU()
        (3): Dropout(p=0.0, inplace=False)
        (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (6): ReLU()
        (7): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      )
      (reg_layers): Sequential(
        (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (2): ReLU()
        (3): Dropout(p=0.0, inplace=False)
        (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (6): ReLU()
        (7): Conv1d(256, 7, kernel_size=(1,), stride=(1,))
      )
      (roipoint_pool3d_layer): RoIPointPool3d()
    )
  )
)
2023-03-01 13:39:46,441   INFO  **********************Start training lyft_models/pointrcnn_hindsight_p2_2staged_finetune(default)**********************
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
2023-03-01 17:59:28,922   INFO  **********************End training lyft_models/pointrcnn_hindsight_p2_2staged_finetune(default)**********************



2023-03-01 17:59:28,923   INFO  **********************Start evaluation lyft_models/pointrcnn_hindsight_p2_2staged_finetune(default)**********************
2023-03-01 17:59:29,016   INFO  Loading KITTI dataset
2023-03-01 17:59:29,171   INFO  Total samples for KITTI dataset: 2432
wandb: WARNING When using several event log directories, please call `wandb.tensorboard.patch(root_logdir="...")` before `wandb.init`
wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /home/tz98/projects/continual-DA/downstream/OpenPCDet/output/lyft_models/pointrcnn_hindsight_p2_2staged_finetune/default/eval/eval_with_train/tensorboard_val
2023-03-01 17:59:29,206   INFO  ==> Loading parameters from checkpoint /home/tz98/projects/continual-DA/downstream/OpenPCDet/output/lyft_models/pointrcnn_hindsight_p2_2staged_finetune/default/ckpt/checkpoint_epoch_10.pth to CPU
2023-03-01 17:59:29,281   INFO  ==> Checkpoint trained from version: pcdet+0.3.0+0000000
2023-03-01 17:59:30,420   INFO  ==> Done (loaded 502/502)
PointRCNN(
  (history_query): SparseResUQueryNet(
    (history_backbone): Res16UNet14E(
      (conv0p1s1): MinkowskiConvolution(in=1, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
      (bn0): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (conv1p1s2): MinkowskiConvolution(in=32, out=32, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn1): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block1): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=32, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=32, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
        )
      )
      (conv2p2s2): MinkowskiConvolution(in=32, out=32, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn2): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block2): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=32, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=32, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (conv3p4s2): MinkowskiConvolution(in=64, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn3): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block3): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=64, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=64, out=128, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (conv4p8s2): MinkowskiConvolution(in=128, out=128, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn4): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block4): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
        )
      )
      (convtr4p16s2): MinkowskiConvolutionTranspose(in=128, out=128, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr4): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block5): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=256, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=256, out=128, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr5p8s2): MinkowskiConvolutionTranspose(in=128, out=96, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr5): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block6): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=160, out=96, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=96, out=96, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=160, out=96, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr6p4s2): MinkowskiConvolutionTranspose(in=96, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr6): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block7): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=96, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=96, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr7p2s2): MinkowskiConvolutionTranspose(in=64, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr7): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block8): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=96, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=96, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (relu): MinkowskiReLU()
      (final): MinkowskiConvolution(in=64, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
    )
    (pool): MinkowskiMaxPooling(kernel_size=[1000, 1, 1, 1], stride=[1000, 1, 1, 1], dilation=[1, 1, 1, 1])
    (p2_backbone): Sequential(
      (0): Linear(in_features=68, out_features=32, bias=True)
      (1): ReLU()
      (2): Linear(in_features=32, out_features=1, bias=True)
    )
    (current_conv): MinkowskiConvolution(in=64, out=64, kernel_size=[5, 5, 5], stride=[1, 1, 1], dilation=[1, 1, 1])
  )
  (vfe): None
  (backbone_3d): PointNet2MSG(
    (SA_modules): ModuleList(
      (0): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(67, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(67, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (1): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (2): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (3): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
    )
    (FP_modules): ModuleList(
      (0): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (1): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (2): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (3): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
    )
  )
  (map_to_bev_module): None
  (pfe): None
  (backbone_2d): None
  (dense_head): None
  (point_head): PointHeadBox(
    (cls_loss_func): SigmoidFocalClassificationLoss()
    (reg_loss_func): WeightedSmoothL1Loss()
    (cls_layers): Sequential(
      (0): Linear(in_features=128, out_features=256, bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Linear(in_features=256, out_features=256, bias=False)
      (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (5): ReLU()
      (6): Linear(in_features=256, out_features=2, bias=True)
    )
    (box_layers): Sequential(
      (0): Linear(in_features=128, out_features=256, bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Linear(in_features=256, out_features=256, bias=False)
      (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (5): ReLU()
      (6): Linear(in_features=256, out_features=8, bias=True)
    )
  )
  (roi_head): PointRCNNHead(
    (proposal_target_layer): ProposalTargetLayer()
    (reg_loss_func): WeightedSmoothL1Loss()
    (SA_modules): ModuleList(
      (0): PointnetSAModule(
        (groupers): ModuleList(
          (0): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (1): PointnetSAModule(
        (groupers): ModuleList(
          (0): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (2): PointnetSAModule(
        (groupers): ModuleList(
          (0): GroupAll()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(259, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
    )
    (xyz_up_layer): Sequential(
      (0): Conv2d(5, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      (3): ReLU()
    )
    (merge_down_layer): Sequential(
      (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU()
    )
    (cls_layers): Sequential(
      (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Dropout(p=0.0, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (6): ReLU()
      (7): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
    )
    (reg_layers): Sequential(
      (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Dropout(p=0.0, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (6): ReLU()
      (7): Conv1d(256, 7, kernel_size=(1,), stride=(1,))
    )
    (roipoint_pool3d_layer): RoIPointPool3d()
  )
)
2023-03-01 17:59:30,427   INFO  *************** EPOCH 10 EVALUATION *****************
eval:   0%|                                                                                       | 0/304 [00:00<?, ?it/s]PointRCNN(
  (history_query): SparseResUQueryNet(
    (history_backbone): Res16UNet14E(
      (conv0p1s1): MinkowskiConvolution(in=1, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
      (bn0): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (conv1p1s2): MinkowskiConvolution(in=32, out=32, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn1): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block1): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=32, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=32, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
        )
      )
      (conv2p2s2): MinkowskiConvolution(in=32, out=32, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn2): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block2): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=32, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=32, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (conv3p4s2): MinkowskiConvolution(in=64, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn3): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block3): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=64, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=64, out=128, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (conv4p8s2): MinkowskiConvolution(in=128, out=128, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn4): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block4): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
        )
      )
      (convtr4p16s2): MinkowskiConvolutionTranspose(in=128, out=128, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr4): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block5): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=256, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=256, out=128, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr5p8s2): MinkowskiConvolutionTranspose(in=128, out=96, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr5): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block6): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=160, out=96, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=96, out=96, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=160, out=96, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr6p4s2): MinkowskiConvolutionTranspose(in=96, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr6): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block7): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=96, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=96, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr7p2s2): MinkowskiConvolutionTranspose(in=64, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr7): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block8): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=96, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=96, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (relu): MinkowskiReLU()
      (final): MinkowskiConvolution(in=64, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
    )
    (pool): MinkowskiMaxPooling(kernel_size=[1000, 1, 1, 1], stride=[1000, 1, 1, 1], dilation=[1, 1, 1, 1])
    (p2_backbone): Sequential(
      (0): Linear(in_features=68, out_features=32, bias=True)
      (1): ReLU()
      (2): Linear(in_features=32, out_features=1, bias=True)
    )
    (current_conv): MinkowskiConvolution(in=64, out=64, kernel_size=[5, 5, 5], stride=[1, 1, 1], dilation=[1, 1, 1])
  )
  (vfe): None
  (backbone_3d): PointNet2MSG(
    (SA_modules): ModuleList(
      (0): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(67, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(67, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (1): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (2): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (3): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
    )
    (FP_modules): ModuleList(
      (0): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (1): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (2): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (3): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
    )
  )
  (map_to_bev_module): None
  (pfe): None
  (backbone_2d): None
  (dense_head): None
  (point_head): PointHeadBox(
    (cls_loss_func): SigmoidFocalClassificationLoss()
    (reg_loss_func): WeightedSmoothL1Loss()
    (cls_layers): Sequential(
      (0): Linear(in_features=128, out_features=256, bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Linear(in_features=256, out_features=256, bias=False)
      (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (5): ReLU()
      (6): Linear(in_features=256, out_features=2, bias=True)
    )
    (box_layers): Sequential(
      (0): Linear(in_features=128, out_features=256, bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Linear(in_features=256, out_features=256, bias=False)
      (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (5): ReLU()
      (6): Linear(in_features=256, out_features=8, bias=True)
    )
  )
  (roi_head): PointRCNNHead(
    (proposal_target_layer): ProposalTargetLayer()
    (reg_loss_func): WeightedSmoothL1Loss()
    (SA_modules): ModuleList(
      (0): PointnetSAModule(
        (groupers): ModuleList(
          (0): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (1): PointnetSAModule(
        (groupers): ModuleList(
          (0): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (2): PointnetSAModule(
        (groupers): ModuleList(
          (0): GroupAll()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(259, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
    )
    (xyz_up_layer): Sequential(
      (0): Conv2d(5, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      (3): ReLU()
    )
    (merge_down_layer): Sequential(
      (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU()
    )
    (cls_layers): Sequential(
      (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Dropout(p=0.0, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (6): ReLU()
      (7): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
    )
    (reg_layers): Sequential(
      (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Dropout(p=0.0, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (6): ReLU()
      (7): Conv1d(256, 7, kernel_size=(1,), stride=(1,))
    )
    (roipoint_pool3d_layer): RoIPointPool3d()
  )
)
PointRCNN(
  (history_query): SparseResUQueryNet(
    (history_backbone): Res16UNet14E(
      (conv0p1s1): MinkowskiConvolution(in=1, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
      (bn0): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (conv1p1s2): MinkowskiConvolution(in=32, out=32, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn1): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block1): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=32, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=32, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
        )
      )
      (conv2p2s2): MinkowskiConvolution(in=32, out=32, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn2): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block2): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=32, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=32, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (conv3p4s2): MinkowskiConvolution(in=64, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn3): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block3): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=64, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=64, out=128, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (conv4p8s2): MinkowskiConvolution(in=128, out=128, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn4): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block4): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
        )
      )
      (convtr4p16s2): MinkowskiConvolutionTranspose(in=128, out=128, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr4): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block5): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=256, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=256, out=128, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr5p8s2): MinkowskiConvolutionTranspose(in=128, out=96, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr5): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block6): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=160, out=96, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=96, out=96, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=160, out=96, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr6p4s2): MinkowskiConvolutionTranspose(in=96, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr6): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block7): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=96, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=96, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr7p2s2): MinkowskiConvolutionTranspose(in=64, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr7): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block8): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=96, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=96, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (relu): MinkowskiReLU()
      (final): MinkowskiConvolution(in=64, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
    )
    (pool): MinkowskiMaxPooling(kernel_size=[1000, 1, 1, 1], stride=[1000, 1, 1, 1], dilation=[1, 1, 1, 1])
    (p2_backbone): Sequential(
      (0): Linear(in_features=68, out_features=32, bias=True)
      (1): ReLU()
      (2): Linear(in_features=32, out_features=1, bias=True)
    )
    (current_conv): MinkowskiConvolution(in=64, out=64, kernel_size=[5, 5, 5], stride=[1, 1, 1], dilation=[1, 1, 1])
  )
  (vfe): None
  (backbone_3d): PointNet2MSG(
    (SA_modules): ModuleList(
      (0): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(67, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(67, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (1): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (2): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (3): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
    )
    (FP_modules): ModuleList(
      (0): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (1): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (2): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (3): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
    )
  )
  (map_to_bev_module): None
  (pfe): None
  (backbone_2d): None
  (dense_head): None
  (point_head): PointHeadBox(
    (cls_loss_func): SigmoidFocalClassificationLoss()
    (reg_loss_func): WeightedSmoothL1Loss()
    (cls_layers): Sequential(
      (0): Linear(in_features=128, out_features=256, bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Linear(in_features=256, out_features=256, bias=False)
      (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (5): ReLU()
      (6): Linear(in_features=256, out_features=2, bias=True)
    )
    (box_layers): Sequential(
      (0): Linear(in_features=128, out_features=256, bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Linear(in_features=256, out_features=256, bias=False)
      (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (5): ReLU()
      (6): Linear(in_features=256, out_features=8, bias=True)
    )
  )
  (roi_head): PointRCNNHead(
    (proposal_target_layer): ProposalTargetLayer()
    (reg_loss_func): WeightedSmoothL1Loss()
    (SA_modules): ModuleList(
      (0): PointnetSAModule(
        (groupers): ModuleList(
          (0): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (1): PointnetSAModule(
        (groupers): ModuleList(
          (0): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (2): PointnetSAModule(
        (groupers): ModuleList(
          (0): GroupAll()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(259, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
    )
    (xyz_up_layer): Sequential(
      (0): Conv2d(5, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      (3): ReLU()
    )
    (merge_down_layer): Sequential(
      (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU()
    )
    (cls_layers): Sequential(
      (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Dropout(p=0.0, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (6): ReLU()
      (7): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
    )
    (reg_layers): Sequential(
      (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Dropout(p=0.0, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (6): ReLU()
      (7): Conv1d(256, 7, kernel_size=(1,), stride=(1,))
    )
    (roipoint_pool3d_layer): RoIPointPool3d()
  )
)
PointRCNN(
  (history_query): SparseResUQueryNet(
    (history_backbone): Res16UNet14E(
      (conv0p1s1): MinkowskiConvolution(in=1, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
      (bn0): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (conv1p1s2): MinkowskiConvolution(in=32, out=32, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn1): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block1): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=32, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=32, out=32, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
        )
      )
      (conv2p2s2): MinkowskiConvolution(in=32, out=32, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn2): MinkowskiBatchNorm(32, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block2): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=32, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=32, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (conv3p4s2): MinkowskiConvolution(in=64, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn3): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block3): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=64, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=64, out=128, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (conv4p8s2): MinkowskiConvolution(in=128, out=128, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bn4): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block4): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
        )
      )
      (convtr4p16s2): MinkowskiConvolutionTranspose(in=128, out=128, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr4): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block5): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=256, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=128, out=128, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=256, out=128, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(128, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr5p8s2): MinkowskiConvolutionTranspose(in=128, out=96, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr5): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block6): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=160, out=96, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=96, out=96, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=160, out=96, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(96, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr6p4s2): MinkowskiConvolutionTranspose(in=96, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr6): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block7): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=96, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=96, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (convtr7p2s2): MinkowskiConvolutionTranspose(in=64, out=64, kernel_size=[2, 2, 2], stride=[2, 2, 2], dilation=[1, 1, 1])
      (bntr7): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
      (block8): Sequential(
        (0): BasicBlock(
          (conv1): MinkowskiConvolution(in=96, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): MinkowskiConvolution(in=64, out=64, kernel_size=[3, 3, 3], stride=[1, 1, 1], dilation=[1, 1, 1])
          (norm2): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): MinkowskiReLU()
          (downsample): Sequential(
            (0): MinkowskiConvolution(in=96, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
            (1): MinkowskiBatchNorm(64, eps=1e-05, momentum=0.05, affine=True, track_running_stats=True)
          )
        )
      )
      (relu): MinkowskiReLU()
      (final): MinkowskiConvolution(in=64, out=64, kernel_size=[1, 1, 1], stride=[1, 1, 1], dilation=[1, 1, 1])
    )
    (pool): MinkowskiMaxPooling(kernel_size=[1000, 1, 1, 1], stride=[1000, 1, 1, 1], dilation=[1, 1, 1, 1])
    (p2_backbone): Sequential(
      (0): Linear(in_features=68, out_features=32, bias=True)
      (1): ReLU()
      (2): Linear(in_features=32, out_features=1, bias=True)
    )
    (current_conv): MinkowskiConvolution(in=64, out=64, kernel_size=[5, 5, 5], stride=[1, 1, 1], dilation=[1, 1, 1])
  )
  (vfe): None
  (backbone_3d): PointNet2MSG(
    (SA_modules): ModuleList(
      (0): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(67, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(67, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (1): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (2): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (3): PointnetSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
    )
    (FP_modules): ModuleList(
      (0): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (1): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (2): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
      (3): PointnetFPModule(
        (mlp): Sequential(
          (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (2): ReLU()
          (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (5): ReLU()
        )
      )
    )
  )
  (map_to_bev_module): None
  (pfe): None
  (backbone_2d): None
  (dense_head): None
  (point_head): PointHeadBox(
    (cls_loss_func): SigmoidFocalClassificationLoss()
    (reg_loss_func): WeightedSmoothL1Loss()
    (cls_layers): Sequential(
      (0): Linear(in_features=128, out_features=256, bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Linear(in_features=256, out_features=256, bias=False)
      (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (5): ReLU()
      (6): Linear(in_features=256, out_features=2, bias=True)
    )
    (box_layers): Sequential(
      (0): Linear(in_features=128, out_features=256, bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Linear(in_features=256, out_features=256, bias=False)
      (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (5): ReLU()
      (6): Linear(in_features=256, out_features=8, bias=True)
    )
  )
  (roi_head): PointRCNNHead(
    (proposal_target_layer): ProposalTargetLayer()
    (reg_loss_func): WeightedSmoothL1Loss()
    (SA_modules): ModuleList(
      (0): PointnetSAModule(
        (groupers): ModuleList(
          (0): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (1): PointnetSAModule(
        (groupers): ModuleList(
          (0): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
      (2): PointnetSAModule(
        (groupers): ModuleList(
          (0): GroupAll()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(259, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (5): ReLU()
            (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (8): ReLU()
          )
        )
      )
    )
    (xyz_up_layer): Sequential(
      (0): Conv2d(5, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      (3): ReLU()
    )
    (merge_down_layer): Sequential(
      (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU()
    )
    (cls_layers): Sequential(
      (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Dropout(p=0.0, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (6): ReLU()
      (7): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
    )
    (reg_layers): Sequential(
      (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (2): ReLU()
      (3): Dropout(p=0.0, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
      (6): ReLU()
      (7): Conv1d(256, 7, kernel_size=(1,), stride=(1,))
    )
    (roipoint_pool3d_layer): RoIPointPool3d()
  )
)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
eval:   0%|                                                                | 0/304 [00:01<?, ?it/s, recall_0.3=(0, 0) / 2]eval:   0%|▏                                                       | 1/304 [00:01<09:30,  1.88s/it, recall_0.3=(0, 0) / 2]eval:   0%|▏                                                       | 1/304 [00:02<09:30,  1.88s/it, recall_0.3=(2, 2) / 4]eval:   1%|▎                                                       | 2/304 [00:02<05:58,  1.19s/it, recall_0.3=(2, 2) / 4]eval:   1%|▎                                                       | 2/304 [00:03<05:58,  1.19s/it, recall_0.3=(3, 3) / 6]eval:   1%|▌                                                       | 3/304 [00:03<05:09,  1.03s/it, recall_0.3=(3, 3) / 6]eval:   1%|▌                                                       | 3/304 [00:04<05:09,  1.03s/it, recall_0.3=(3, 3) / 8]eval:   1%|▋                                                       | 4/304 [00:04<04:34,  1.09it/s, recall_0.3=(3, 3) / 8]eval:   1%|▋                                                      | 4/304 [00:04<04:34,  1.09it/s, recall_0.3=(4, 4) / 10]eval:   2%|▉                                                      | 5/304 [00:04<04:11,  1.19it/s, recall_0.3=(4, 4) / 10]eval:   2%|▊                                                    | 5/304 [00:05<04:11,  1.19it/s, recall_0.3=(13, 13) / 23]eval:   2%|█                                                    | 6/304 [00:05<04:14,  1.17it/s, recall_0.3=(13, 13) / 23]eval:   2%|█                                                    | 6/304 [00:06<04:14,  1.17it/s, recall_0.3=(17, 17) / 33]eval:   2%|█▏                                                   | 7/304 [00:06<03:50,  1.29it/s, recall_0.3=(17, 17) / 33]eval:   2%|█▏                                                   | 7/304 [00:07<03:50,  1.29it/s, recall_0.3=(26, 26) / 43]eval:   3%|█▍                                                   | 8/304 [00:07<03:41,  1.34it/s, recall_0.3=(26, 26) / 43]eval:   3%|█▍                                                   | 8/304 [00:07<03:41,  1.34it/s, recall_0.3=(31, 31) / 53]eval:   3%|█▌                                                   | 9/304 [00:07<03:41,  1.33it/s, recall_0.3=(31, 31) / 53]eval:   3%|█▌                                                   | 9/304 [00:08<03:41,  1.33it/s, recall_0.3=(35, 35) / 60]eval:   3%|█▋                                                  | 10/304 [00:08<03:31,  1.39it/s, recall_0.3=(35, 35) / 60]eval:   3%|█▋                                                  | 10/304 [00:09<03:31,  1.39it/s, recall_0.3=(40, 40) / 67]eval:   4%|█▉                                                  | 11/304 [00:09<03:21,  1.45it/s, recall_0.3=(40, 40) / 67]eval:   4%|█▉                                                  | 11/304 [00:09<03:21,  1.45it/s, recall_0.3=(44, 44) / 73]eval:   4%|██                                                  | 12/304 [00:09<03:39,  1.33it/s, recall_0.3=(44, 44) / 73]eval:   4%|██                                                  | 12/304 [00:10<03:39,  1.33it/s, recall_0.3=(47, 48) / 79]eval:   4%|██▏                                                 | 13/304 [00:10<03:26,  1.41it/s, recall_0.3=(47, 48) / 79]eval:   4%|██▏                                                 | 13/304 [00:11<03:26,  1.41it/s, recall_0.3=(51, 52) / 83]eval:   5%|██▍                                                 | 14/304 [00:11<03:31,  1.37it/s, recall_0.3=(51, 52) / 83]eval:   5%|██▍                                                 | 14/304 [00:12<03:31,  1.37it/s, recall_0.3=(58, 59) / 91]eval:   5%|██▌                                                 | 15/304 [00:12<03:32,  1.36it/s, recall_0.3=(58, 59) / 91]eval:   5%|██▌                                                | 15/304 [00:12<03:32,  1.36it/s, recall_0.3=(64, 65) / 102]eval:   5%|██▋                                                | 16/304 [00:12<03:20,  1.44it/s, recall_0.3=(64, 65) / 102]eval:   5%|██▋                                                | 16/304 [00:13<03:20,  1.44it/s, recall_0.3=(73, 74) / 114]eval:   6%|██▊                                                | 17/304 [00:13<03:16,  1.46it/s, recall_0.3=(73, 74) / 114]eval:   6%|██▊                                                | 17/304 [00:13<03:16,  1.46it/s, recall_0.3=(80, 81) / 124]eval:   6%|███                                                | 18/304 [00:13<03:04,  1.55it/s, recall_0.3=(80, 81) / 124]eval:   6%|███                                                | 18/304 [00:14<03:04,  1.55it/s, recall_0.3=(87, 88) / 134]eval:   6%|███▏                                               | 19/304 [00:14<02:54,  1.64it/s, recall_0.3=(87, 88) / 134]eval:   6%|███▏                                               | 19/304 [00:15<02:54,  1.64it/s, recall_0.3=(95, 96) / 144]eval:   7%|███▎                                               | 20/304 [00:15<02:51,  1.66it/s, recall_0.3=(95, 96) / 144]eval:   7%|███▏                                             | 20/304 [00:15<02:51,  1.66it/s, recall_0.3=(102, 103) / 153]eval:   7%|███▍                                             | 21/304 [00:15<02:57,  1.60it/s, recall_0.3=(102, 103) / 153]eval:   7%|███▍                                             | 21/304 [00:16<02:57,  1.60it/s, recall_0.3=(108, 110) / 161]eval:   7%|███▌                                             | 22/304 [00:16<03:05,  1.52it/s, recall_0.3=(108, 110) / 161]eval:   7%|███▌                                             | 22/304 [00:17<03:05,  1.52it/s, recall_0.3=(112, 114) / 165]eval:   8%|███▋                                             | 23/304 [00:17<03:01,  1.55it/s, recall_0.3=(112, 114) / 165]eval:   8%|███▋                                             | 23/304 [00:17<03:01,  1.55it/s, recall_0.3=(115, 117) / 169]eval:   8%|███▊                                             | 24/304 [00:17<03:13,  1.45it/s, recall_0.3=(115, 117) / 169]eval:   8%|███▊                                             | 24/304 [00:18<03:13,  1.45it/s, recall_0.3=(119, 121) / 173]eval:   8%|████                                             | 25/304 [00:18<03:16,  1.42it/s, recall_0.3=(119, 121) / 173]eval:   8%|████                                             | 25/304 [00:19<03:16,  1.42it/s, recall_0.3=(121, 123) / 176]eval:   9%|████▏                                            | 26/304 [00:19<03:00,  1.54it/s, recall_0.3=(121, 123) / 176]eval:   9%|████▏                                            | 26/304 [00:19<03:00,  1.54it/s, recall_0.3=(121, 123) / 179]eval:   9%|████▎                                            | 27/304 [00:19<02:49,  1.63it/s, recall_0.3=(121, 123) / 179]eval:   9%|████▎                                            | 27/304 [00:20<02:49,  1.63it/s, recall_0.3=(122, 124) / 184]eval:   9%|████▌                                            | 28/304 [00:20<02:48,  1.64it/s, recall_0.3=(122, 124) / 184]eval:   9%|████▌                                            | 28/304 [00:20<02:48,  1.64it/s, recall_0.3=(124, 125) / 190]eval:  10%|████▋                                            | 29/304 [00:20<02:47,  1.64it/s, recall_0.3=(124, 125) / 190]eval:  10%|████▋                                            | 29/304 [00:21<02:47,  1.64it/s, recall_0.3=(127, 127) / 194]eval:  10%|████▊                                            | 30/304 [00:21<02:55,  1.56it/s, recall_0.3=(127, 127) / 194]eval:  10%|████▊                                            | 30/304 [00:22<02:55,  1.56it/s, recall_0.3=(128, 128) / 203]eval:  10%|████▉                                            | 31/304 [00:22<02:42,  1.68it/s, recall_0.3=(128, 128) / 203]eval:  10%|████▉                                            | 31/304 [00:22<02:42,  1.68it/s, recall_0.3=(134, 134) / 219]eval:  11%|█████▏                                           | 32/304 [00:22<02:47,  1.62it/s, recall_0.3=(134, 134) / 219]eval:  11%|█████▏                                           | 32/304 [00:23<02:47,  1.62it/s, recall_0.3=(144, 144) / 238]eval:  11%|█████▎                                           | 33/304 [00:23<03:05,  1.46it/s, recall_0.3=(144, 144) / 238]eval:  11%|█████▎                                           | 33/304 [00:24<03:05,  1.46it/s, recall_0.3=(151, 151) / 252]eval:  11%|█████▍                                           | 34/304 [00:24<03:08,  1.43it/s, recall_0.3=(151, 151) / 252]eval:  11%|█████▍                                           | 34/304 [00:24<03:08,  1.43it/s, recall_0.3=(156, 156) / 262]eval:  12%|█████▋                                           | 35/304 [00:24<03:06,  1.44it/s, recall_0.3=(156, 156) / 262]eval:  12%|█████▋                                           | 35/304 [00:25<03:06,  1.44it/s, recall_0.3=(159, 159) / 268]eval:  12%|█████▊                                           | 36/304 [00:25<02:58,  1.50it/s, recall_0.3=(159, 159) / 268]eval:  12%|█████▊                                           | 36/304 [00:26<02:58,  1.50it/s, recall_0.3=(163, 163) / 273]eval:  12%|█████▉                                           | 37/304 [00:26<02:48,  1.59it/s, recall_0.3=(163, 163) / 273]eval:  12%|█████▉                                           | 37/304 [00:26<02:48,  1.59it/s, recall_0.3=(163, 163) / 277]eval:  12%|██████▏                                          | 38/304 [00:26<02:50,  1.56it/s, recall_0.3=(163, 163) / 277]eval:  12%|██████▏                                          | 38/304 [00:27<02:50,  1.56it/s, recall_0.3=(165, 165) / 279]eval:  13%|██████▎                                          | 39/304 [00:27<02:49,  1.57it/s, recall_0.3=(165, 165) / 279]eval:  13%|██████▎                                          | 39/304 [00:28<02:49,  1.57it/s, recall_0.3=(166, 166) / 281]eval:  13%|██████▍                                          | 40/304 [00:28<02:46,  1.59it/s, recall_0.3=(166, 166) / 281]eval:  13%|██████▍                                          | 40/304 [00:28<02:46,  1.59it/s, recall_0.3=(166, 166) / 283]eval:  13%|██████▌                                          | 41/304 [00:28<02:44,  1.60it/s, recall_0.3=(166, 166) / 283]eval:  13%|██████▌                                          | 41/304 [00:29<02:44,  1.60it/s, recall_0.3=(167, 167) / 286]eval:  14%|██████▊                                          | 42/304 [00:29<02:39,  1.64it/s, recall_0.3=(167, 167) / 286]eval:  14%|██████▊                                          | 42/304 [00:29<02:39,  1.64it/s, recall_0.3=(169, 169) / 290]eval:  14%|██████▉                                          | 43/304 [00:29<02:32,  1.71it/s, recall_0.3=(169, 169) / 290]eval:  14%|██████▉                                          | 43/304 [00:30<02:32,  1.71it/s, recall_0.3=(171, 171) / 293]eval:  14%|███████                                          | 44/304 [00:30<02:37,  1.65it/s, recall_0.3=(171, 171) / 293]eval:  14%|███████                                          | 44/304 [00:30<02:37,  1.65it/s, recall_0.3=(173, 173) / 295]eval:  15%|███████▎                                         | 45/304 [00:30<02:29,  1.73it/s, recall_0.3=(173, 173) / 295]eval:  15%|███████▎                                         | 45/304 [00:31<02:29,  1.73it/s, recall_0.3=(176, 176) / 299]eval:  15%|███████▍                                         | 46/304 [00:31<02:24,  1.79it/s, recall_0.3=(176, 176) / 299]eval:  15%|███████▍                                         | 46/304 [00:31<02:24,  1.79it/s, recall_0.3=(179, 179) / 303]eval:  15%|███████▌                                         | 47/304 [00:31<01:55,  2.23it/s, recall_0.3=(179, 179) / 303]eval:  15%|███████▌                                         | 47/304 [00:32<01:55,  2.23it/s, recall_0.3=(181, 181) / 307]eval:  16%|███████▋                                         | 48/304 [00:32<01:50,  2.31it/s, recall_0.3=(181, 181) / 307]eval:  16%|███████▋                                         | 48/304 [00:32<01:50,  2.31it/s, recall_0.3=(182, 182) / 311]eval:  16%|███████▉                                         | 49/304 [00:32<02:20,  1.82it/s, recall_0.3=(182, 182) / 311]eval:  16%|███████▉                                         | 49/304 [00:33<02:20,  1.82it/s, recall_0.3=(182, 182) / 315]eval:  16%|████████                                         | 50/304 [00:33<02:39,  1.60it/s, recall_0.3=(182, 182) / 315]eval:  16%|████████                                         | 50/304 [00:34<02:39,  1.60it/s, recall_0.3=(184, 184) / 320]eval:  17%|████████▏                                        | 51/304 [00:34<02:35,  1.63it/s, recall_0.3=(184, 184) / 320]eval:  17%|████████▏                                        | 51/304 [00:34<02:35,  1.63it/s, recall_0.3=(188, 188) / 328]eval:  17%|████████▍                                        | 52/304 [00:34<02:41,  1.56it/s, recall_0.3=(188, 188) / 328]eval:  17%|████████▍                                        | 52/304 [00:35<02:41,  1.56it/s, recall_0.3=(191, 191) / 333]eval:  17%|████████▌                                        | 53/304 [00:35<02:51,  1.46it/s, recall_0.3=(191, 191) / 333]eval:  17%|████████▌                                        | 53/304 [00:36<02:51,  1.46it/s, recall_0.3=(192, 192) / 336]eval:  18%|████████▋                                        | 54/304 [00:36<02:54,  1.43it/s, recall_0.3=(192, 192) / 336]eval:  18%|████████▋                                        | 54/304 [00:37<02:54,  1.43it/s, recall_0.3=(192, 192) / 338]eval:  18%|████████▊                                        | 55/304 [00:37<02:55,  1.42it/s, recall_0.3=(192, 192) / 338]eval:  18%|████████▊                                        | 55/304 [00:37<02:55,  1.42it/s, recall_0.3=(192, 192) / 340]eval:  18%|█████████                                        | 56/304 [00:37<02:49,  1.46it/s, recall_0.3=(192, 192) / 340]eval:  18%|█████████                                        | 56/304 [00:38<02:49,  1.46it/s, recall_0.3=(193, 193) / 346]eval:  19%|█████████▏                                       | 57/304 [00:38<02:56,  1.40it/s, recall_0.3=(193, 193) / 346]eval:  19%|█████████▏                                       | 57/304 [00:39<02:56,  1.40it/s, recall_0.3=(198, 198) / 355]eval:  19%|█████████▎                                       | 58/304 [00:39<02:49,  1.45it/s, recall_0.3=(198, 198) / 355]eval:  19%|█████████▎                                       | 58/304 [00:39<02:49,  1.45it/s, recall_0.3=(207, 207) / 367]eval:  19%|█████████▌                                       | 59/304 [00:39<02:37,  1.55it/s, recall_0.3=(207, 207) / 367]eval:  19%|█████████▌                                       | 59/304 [00:40<02:37,  1.55it/s, recall_0.3=(217, 217) / 381]eval:  20%|█████████▋                                       | 60/304 [00:40<02:14,  1.82it/s, recall_0.3=(217, 217) / 381]eval:  20%|█████████▋                                       | 60/304 [00:40<02:14,  1.82it/s, recall_0.3=(225, 225) / 394]eval:  20%|█████████▊                                       | 61/304 [00:40<02:03,  1.97it/s, recall_0.3=(225, 225) / 394]eval:  20%|█████████▊                                       | 61/304 [00:40<02:03,  1.97it/s, recall_0.3=(233, 233) / 406]eval:  20%|█████████▉                                       | 62/304 [00:40<01:52,  2.15it/s, recall_0.3=(233, 233) / 406]eval:  20%|█████████▉                                       | 62/304 [00:41<01:52,  2.15it/s, recall_0.3=(238, 238) / 412]eval:  21%|██████████▏                                      | 63/304 [00:41<01:50,  2.19it/s, recall_0.3=(238, 238) / 412]eval:  21%|██████████▏                                      | 63/304 [00:41<01:50,  2.19it/s, recall_0.3=(240, 240) / 416]eval:  21%|██████████▎                                      | 64/304 [00:41<01:38,  2.43it/s, recall_0.3=(240, 240) / 416]eval:  21%|██████████▎                                      | 64/304 [00:42<01:38,  2.43it/s, recall_0.3=(242, 242) / 424]eval:  21%|██████████▍                                      | 65/304 [00:42<01:39,  2.40it/s, recall_0.3=(242, 242) / 424]eval:  21%|██████████▍                                      | 65/304 [00:42<01:39,  2.40it/s, recall_0.3=(250, 250) / 443]eval:  22%|██████████▋                                      | 66/304 [00:42<01:45,  2.25it/s, recall_0.3=(250, 250) / 443]eval:  22%|██████████▋                                      | 66/304 [00:43<01:45,  2.25it/s, recall_0.3=(262, 262) / 463]eval:  22%|██████████▊                                      | 67/304 [00:43<02:02,  1.94it/s, recall_0.3=(262, 262) / 463]eval:  22%|██████████▊                                      | 67/304 [00:43<02:02,  1.94it/s, recall_0.3=(269, 269) / 478]eval:  22%|██████████▉                                      | 68/304 [00:43<02:12,  1.78it/s, recall_0.3=(269, 269) / 478]eval:  22%|██████████▉                                      | 68/304 [00:44<02:12,  1.78it/s, recall_0.3=(279, 279) / 494]eval:  23%|███████████                                      | 69/304 [00:44<02:27,  1.60it/s, recall_0.3=(279, 279) / 494]eval:  23%|███████████                                      | 69/304 [00:45<02:27,  1.60it/s, recall_0.3=(285, 285) / 504]eval:  23%|███████████▎                                     | 70/304 [00:45<02:37,  1.49it/s, recall_0.3=(285, 285) / 504]eval:  23%|███████████▎                                     | 70/304 [00:46<02:37,  1.49it/s, recall_0.3=(289, 289) / 509]eval:  23%|███████████▍                                     | 71/304 [00:46<02:47,  1.39it/s, recall_0.3=(289, 289) / 509]eval:  23%|███████████▍                                     | 71/304 [00:46<02:47,  1.39it/s, recall_0.3=(291, 291) / 513]eval:  24%|███████████▌                                     | 72/304 [00:46<02:40,  1.45it/s, recall_0.3=(291, 291) / 513]eval:  24%|███████████▌                                     | 72/304 [00:47<02:40,  1.45it/s, recall_0.3=(296, 296) / 519]eval:  24%|███████████▊                                     | 73/304 [00:47<02:39,  1.45it/s, recall_0.3=(296, 296) / 519]eval:  24%|███████████▊                                     | 73/304 [00:48<02:39,  1.45it/s, recall_0.3=(299, 299) / 525]eval:  24%|███████████▉                                     | 74/304 [00:48<02:33,  1.50it/s, recall_0.3=(299, 299) / 525]eval:  24%|███████████▉                                     | 74/304 [00:48<02:33,  1.50it/s, recall_0.3=(301, 301) / 527]eval:  25%|████████████                                     | 75/304 [00:48<02:32,  1.50it/s, recall_0.3=(301, 301) / 527]eval:  25%|████████████                                     | 75/304 [00:49<02:32,  1.50it/s, recall_0.3=(303, 303) / 531]eval:  25%|████████████▎                                    | 76/304 [00:49<02:31,  1.50it/s, recall_0.3=(303, 303) / 531]eval:  25%|████████████▎                                    | 76/304 [00:50<02:31,  1.50it/s, recall_0.3=(307, 307) / 537]eval:  25%|████████████▍                                    | 77/304 [00:50<02:29,  1.52it/s, recall_0.3=(307, 307) / 537]eval:  25%|████████████▍                                    | 77/304 [00:50<02:29,  1.52it/s, recall_0.3=(311, 311) / 543]eval:  26%|████████████▌                                    | 78/304 [00:50<02:22,  1.58it/s, recall_0.3=(311, 311) / 543]eval:  26%|████████████▌                                    | 78/304 [00:51<02:22,  1.58it/s, recall_0.3=(313, 313) / 549]eval:  26%|████████████▋                                    | 79/304 [00:51<02:18,  1.62it/s, recall_0.3=(313, 313) / 549]eval:  26%|████████████▋                                    | 79/304 [00:51<02:18,  1.62it/s, recall_0.3=(316, 316) / 554]eval:  26%|████████████▉                                    | 80/304 [00:52<02:21,  1.59it/s, recall_0.3=(316, 316) / 554]eval:  26%|████████████▉                                    | 80/304 [00:52<02:21,  1.59it/s, recall_0.3=(318, 318) / 557]eval:  27%|█████████████                                    | 81/304 [00:52<02:15,  1.65it/s, recall_0.3=(318, 318) / 557]eval:  27%|█████████████                                    | 81/304 [00:53<02:15,  1.65it/s, recall_0.3=(319, 319) / 559]eval:  27%|█████████████▏                                   | 82/304 [00:53<02:24,  1.54it/s, recall_0.3=(319, 319) / 559]eval:  27%|█████████████▏                                   | 82/304 [00:54<02:24,  1.54it/s, recall_0.3=(324, 324) / 566]eval:  27%|█████████████▍                                   | 83/304 [00:54<02:36,  1.42it/s, recall_0.3=(324, 324) / 566]eval:  27%|█████████████▍                                   | 83/304 [00:54<02:36,  1.42it/s, recall_0.3=(330, 330) / 576]eval:  28%|█████████████▌                                   | 84/304 [00:54<02:28,  1.48it/s, recall_0.3=(330, 330) / 576]eval:  28%|█████████████▌                                   | 84/304 [00:55<02:28,  1.48it/s, recall_0.3=(336, 336) / 586]eval:  28%|█████████████▋                                   | 85/304 [00:55<02:26,  1.50it/s, recall_0.3=(336, 336) / 586]eval:  28%|█████████████▋                                   | 85/304 [00:56<02:26,  1.50it/s, recall_0.3=(342, 342) / 593]eval:  28%|█████████████▊                                   | 86/304 [00:56<02:30,  1.45it/s, recall_0.3=(342, 342) / 593]eval:  28%|█████████████▊                                   | 86/304 [00:56<02:30,  1.45it/s, recall_0.3=(348, 348) / 600]eval:  29%|██████████████                                   | 87/304 [00:56<02:25,  1.49it/s, recall_0.3=(348, 348) / 600]eval:  29%|██████████████                                   | 87/304 [00:57<02:25,  1.49it/s, recall_0.3=(354, 354) / 608]eval:  29%|██████████████▏                                  | 88/304 [00:57<02:21,  1.52it/s, recall_0.3=(354, 354) / 608]eval:  29%|██████████████▏                                  | 88/304 [00:57<02:21,  1.52it/s, recall_0.3=(359, 358) / 614]eval:  29%|██████████████▎                                  | 89/304 [00:57<02:14,  1.60it/s, recall_0.3=(359, 358) / 614]eval:  29%|██████████████▎                                  | 89/304 [00:58<02:14,  1.60it/s, recall_0.3=(362, 361) / 617]eval:  30%|██████████████▌                                  | 90/304 [00:58<02:10,  1.64it/s, recall_0.3=(362, 361) / 617]eval:  30%|██████████████▌                                  | 90/304 [00:59<02:10,  1.64it/s, recall_0.3=(364, 363) / 619]eval:  30%|██████████████▋                                  | 91/304 [00:59<02:15,  1.57it/s, recall_0.3=(364, 363) / 619]eval:  30%|██████████████▋                                  | 91/304 [00:59<02:15,  1.57it/s, recall_0.3=(365, 364) / 621]eval:  30%|██████████████▊                                  | 92/304 [00:59<02:20,  1.51it/s, recall_0.3=(365, 364) / 621]eval:  30%|██████████████▊                                  | 92/304 [01:00<02:20,  1.51it/s, recall_0.3=(365, 364) / 623]eval:  31%|██████████████▉                                  | 93/304 [01:00<02:16,  1.55it/s, recall_0.3=(365, 364) / 623]eval:  31%|██████████████▉                                  | 93/304 [01:01<02:16,  1.55it/s, recall_0.3=(365, 364) / 623]eval:  31%|███████████████▏                                 | 94/304 [01:01<02:06,  1.66it/s, recall_0.3=(365, 364) / 623]eval:  31%|███████████████▏                                 | 94/304 [01:01<02:06,  1.66it/s, recall_0.3=(366, 365) / 625]eval:  31%|███████████████▎                                 | 95/304 [01:01<02:01,  1.72it/s, recall_0.3=(366, 365) / 625]eval:  31%|███████████████▎                                 | 95/304 [01:02<02:01,  1.72it/s, recall_0.3=(369, 368) / 628]eval:  32%|███████████████▍                                 | 96/304 [01:02<01:59,  1.74it/s, recall_0.3=(369, 368) / 628]eval:  32%|███████████████▍                                 | 96/304 [01:02<01:59,  1.74it/s, recall_0.3=(369, 368) / 631]eval:  32%|███████████████▋                                 | 97/304 [01:02<01:53,  1.83it/s, recall_0.3=(369, 368) / 631]eval:  32%|███████████████▋                                 | 97/304 [01:03<01:53,  1.83it/s, recall_0.3=(369, 368) / 635]eval:  32%|███████████████▊                                 | 98/304 [01:03<01:44,  1.97it/s, recall_0.3=(369, 368) / 635]eval:  32%|███████████████▊                                 | 98/304 [01:03<01:44,  1.97it/s, recall_0.3=(371, 370) / 637]eval:  33%|███████████████▉                                 | 99/304 [01:03<01:42,  1.99it/s, recall_0.3=(371, 370) / 637]eval:  33%|███████████████▉                                 | 99/304 [01:03<01:42,  1.99it/s, recall_0.3=(372, 371) / 639]eval:  33%|███████████████▊                                | 100/304 [01:03<01:39,  2.05it/s, recall_0.3=(372, 371) / 639]eval:  33%|███████████████▊                                | 100/304 [01:04<01:39,  2.05it/s, recall_0.3=(374, 373) / 641]eval:  33%|███████████████▉                                | 101/304 [01:04<01:26,  2.35it/s, recall_0.3=(374, 373) / 641]eval:  33%|███████████████▉                                | 101/304 [01:04<01:26,  2.35it/s, recall_0.3=(376, 375) / 643]eval:  34%|████████████████                                | 102/304 [01:04<01:20,  2.51it/s, recall_0.3=(376, 375) / 643]eval:  34%|████████████████                                | 102/304 [01:04<01:20,  2.51it/s, recall_0.3=(378, 377) / 647]eval:  34%|████████████████▎                               | 103/304 [01:04<01:20,  2.50it/s, recall_0.3=(378, 377) / 647]eval:  34%|████████████████▎                               | 103/304 [01:05<01:20,  2.50it/s, recall_0.3=(383, 382) / 660]eval:  34%|████████████████▍                               | 104/304 [01:05<01:12,  2.77it/s, recall_0.3=(383, 382) / 660]eval:  34%|████████████████▍                               | 104/304 [01:05<01:12,  2.77it/s, recall_0.3=(394, 393) / 686]eval:  35%|████████████████▌                               | 105/304 [01:05<01:04,  3.09it/s, recall_0.3=(394, 393) / 686]eval:  35%|████████████████▌                               | 105/304 [01:05<01:04,  3.09it/s, recall_0.3=(404, 403) / 710]eval:  35%|████████████████▋                               | 106/304 [01:05<01:05,  3.03it/s, recall_0.3=(404, 403) / 710]eval:  35%|████████████████▋                               | 106/304 [01:06<01:05,  3.03it/s, recall_0.3=(417, 416) / 734]eval:  35%|████████████████▉                               | 107/304 [01:06<01:03,  3.12it/s, recall_0.3=(417, 416) / 734]eval:  35%|████████████████▉                               | 107/304 [01:06<01:03,  3.12it/s, recall_0.3=(427, 426) / 759]eval:  36%|█████████████████                               | 108/304 [01:06<01:07,  2.90it/s, recall_0.3=(427, 426) / 759]eval:  36%|█████████████████                               | 108/304 [01:06<01:07,  2.90it/s, recall_0.3=(439, 438) / 782]eval:  36%|█████████████████▏                              | 109/304 [01:06<01:03,  3.06it/s, recall_0.3=(439, 438) / 782]eval:  36%|█████████████████▏                              | 109/304 [01:07<01:03,  3.06it/s, recall_0.3=(456, 455) / 808]eval:  36%|█████████████████▎                              | 110/304 [01:07<01:00,  3.23it/s, recall_0.3=(456, 455) / 808]eval:  36%|█████████████████▎                              | 110/304 [01:07<01:00,  3.23it/s, recall_0.3=(456, 455) / 808]eval:  37%|█████████████████▌                              | 111/304 [01:07<01:05,  2.93it/s, recall_0.3=(456, 455) / 808]eval:  37%|█████████████████▌                              | 111/304 [01:07<01:05,  2.93it/s, recall_0.3=(456, 455) / 808]eval:  37%|█████████████████▋                              | 112/304 [01:07<01:01,  3.13it/s, recall_0.3=(456, 455) / 808]eval:  37%|█████████████████▋                              | 112/304 [01:08<01:01,  3.13it/s, recall_0.3=(456, 455) / 810]eval:  37%|█████████████████▊                              | 113/304 [01:08<01:01,  3.13it/s, recall_0.3=(456, 455) / 810]eval:  37%|█████████████████▊                              | 113/304 [01:08<01:01,  3.13it/s, recall_0.3=(456, 455) / 812]eval:  38%|██████████████████                              | 114/304 [01:08<01:10,  2.71it/s, recall_0.3=(456, 455) / 812]eval:  38%|██████████████████                              | 114/304 [01:08<01:10,  2.71it/s, recall_0.3=(458, 457) / 818]eval:  38%|██████████████████▏                             | 115/304 [01:09<01:12,  2.60it/s, recall_0.3=(458, 457) / 818]eval:  38%|██████████████████▏                             | 115/304 [01:09<01:12,  2.60it/s, recall_0.3=(460, 459) / 825]eval:  38%|██████████████████▎                             | 116/304 [01:09<01:14,  2.51it/s, recall_0.3=(460, 459) / 825]eval:  38%|██████████████████▎                             | 116/304 [01:09<01:14,  2.51it/s, recall_0.3=(462, 461) / 829]eval:  38%|██████████████████▍                             | 117/304 [01:09<01:15,  2.47it/s, recall_0.3=(462, 461) / 829]eval:  38%|██████████████████▍                             | 117/304 [01:10<01:15,  2.47it/s, recall_0.3=(463, 462) / 833]eval:  39%|██████████████████▋                             | 118/304 [01:10<01:14,  2.48it/s, recall_0.3=(463, 462) / 833]eval:  39%|██████████████████▋                             | 118/304 [01:10<01:14,  2.48it/s, recall_0.3=(463, 462) / 835]eval:  39%|██████████████████▊                             | 119/304 [01:10<01:12,  2.57it/s, recall_0.3=(463, 462) / 835]eval:  39%|██████████████████▊                             | 119/304 [01:10<01:12,  2.57it/s, recall_0.3=(463, 462) / 835]eval:  39%|██████████████████▉                             | 120/304 [01:10<01:08,  2.70it/s, recall_0.3=(463, 462) / 835]eval:  39%|██████████████████▉                             | 120/304 [01:11<01:08,  2.70it/s, recall_0.3=(463, 462) / 835]eval:  40%|███████████████████                             | 121/304 [01:11<01:06,  2.76it/s, recall_0.3=(463, 462) / 835]eval:  40%|███████████████████                             | 121/304 [01:11<01:06,  2.76it/s, recall_0.3=(463, 462) / 837]eval:  40%|███████████████████▎                            | 122/304 [01:11<01:07,  2.70it/s, recall_0.3=(463, 462) / 837]eval:  40%|███████████████████▎                            | 122/304 [01:11<01:07,  2.70it/s, recall_0.3=(466, 465) / 842]eval:  40%|███████████████████▍                            | 123/304 [01:11<01:03,  2.87it/s, recall_0.3=(466, 465) / 842]eval:  40%|███████████████████▍                            | 123/304 [01:12<01:03,  2.87it/s, recall_0.3=(470, 470) / 849]eval:  41%|███████████████████▌                            | 124/304 [01:12<01:07,  2.65it/s, recall_0.3=(470, 470) / 849]eval:  41%|███████████████████▌                            | 124/304 [01:12<01:07,  2.65it/s, recall_0.3=(473, 473) / 854]eval:  41%|███████████████████▋                            | 125/304 [01:12<01:08,  2.60it/s, recall_0.3=(473, 473) / 854]eval:  41%|███████████████████▋                            | 125/304 [01:13<01:08,  2.60it/s, recall_0.3=(476, 476) / 860]eval:  41%|███████████████████▉                            | 126/304 [01:13<00:59,  3.02it/s, recall_0.3=(476, 476) / 860]eval:  41%|███████████████████▉                            | 126/304 [01:13<00:59,  3.02it/s, recall_0.3=(478, 478) / 864]eval:  42%|████████████████████                            | 127/304 [01:13<01:08,  2.57it/s, recall_0.3=(478, 478) / 864]eval:  42%|████████████████████                            | 127/304 [01:14<01:08,  2.57it/s, recall_0.3=(478, 478) / 868]eval:  42%|████████████████████▏                           | 128/304 [01:14<01:21,  2.17it/s, recall_0.3=(478, 478) / 868]eval:  42%|████████████████████▏                           | 128/304 [01:14<01:21,  2.17it/s, recall_0.3=(482, 482) / 875]eval:  42%|████████████████████▎                           | 129/304 [01:14<01:25,  2.05it/s, recall_0.3=(482, 482) / 875]eval:  42%|████████████████████▎                           | 129/304 [01:15<01:25,  2.05it/s, recall_0.3=(485, 486) / 881]eval:  43%|████████████████████▌                           | 130/304 [01:15<01:32,  1.88it/s, recall_0.3=(485, 486) / 881]eval:  43%|████████████████████▌                           | 130/304 [01:15<01:32,  1.88it/s, recall_0.3=(487, 488) / 886]eval:  43%|████████████████████▋                           | 131/304 [01:15<01:36,  1.80it/s, recall_0.3=(487, 488) / 886]eval:  43%|████████████████████▋                           | 131/304 [01:16<01:36,  1.80it/s, recall_0.3=(492, 493) / 894]eval:  43%|████████████████████▊                           | 132/304 [01:16<01:47,  1.60it/s, recall_0.3=(492, 493) / 894]eval:  43%|████████████████████▊                           | 132/304 [01:17<01:47,  1.60it/s, recall_0.3=(497, 498) / 900]eval:  44%|█████████████████████                           | 133/304 [01:17<01:47,  1.59it/s, recall_0.3=(497, 498) / 900]eval:  44%|█████████████████████                           | 133/304 [01:18<01:47,  1.59it/s, recall_0.3=(500, 501) / 903]eval:  44%|█████████████████████▏                          | 134/304 [01:18<01:49,  1.55it/s, recall_0.3=(500, 501) / 903]eval:  44%|█████████████████████▏                          | 134/304 [01:18<01:49,  1.55it/s, recall_0.3=(501, 502) / 905]eval:  44%|█████████████████████▎                          | 135/304 [01:18<01:57,  1.44it/s, recall_0.3=(501, 502) / 905]eval:  44%|█████████████████████▎                          | 135/304 [01:19<01:57,  1.44it/s, recall_0.3=(501, 502) / 905]eval:  45%|█████████████████████▍                          | 136/304 [01:19<01:48,  1.55it/s, recall_0.3=(501, 502) / 905]eval:  45%|█████████████████████▍                          | 136/304 [01:19<01:48,  1.55it/s, recall_0.3=(501, 502) / 908]eval:  45%|█████████████████████▋                          | 137/304 [01:19<01:36,  1.73it/s, recall_0.3=(501, 502) / 908]eval:  45%|█████████████████████▋                          | 137/304 [01:20<01:36,  1.73it/s, recall_0.3=(502, 503) / 912]eval:  45%|█████████████████████▊                          | 138/304 [01:20<01:32,  1.79it/s, recall_0.3=(502, 503) / 912]eval:  45%|█████████████████████▊                          | 138/304 [01:20<01:32,  1.79it/s, recall_0.3=(506, 507) / 918]eval:  46%|█████████████████████▉                          | 139/304 [01:20<01:29,  1.84it/s, recall_0.3=(506, 507) / 918]eval:  46%|█████████████████████▉                          | 139/304 [01:21<01:29,  1.84it/s, recall_0.3=(509, 510) / 924]eval:  46%|██████████████████████                          | 140/304 [01:21<01:27,  1.88it/s, recall_0.3=(509, 510) / 924]eval:  46%|██████████████████████                          | 140/304 [01:21<01:27,  1.88it/s, recall_0.3=(511, 512) / 930]eval:  46%|██████████████████████▎                         | 141/304 [01:21<01:22,  1.98it/s, recall_0.3=(511, 512) / 930]eval:  46%|██████████████████████▎                         | 141/304 [01:22<01:22,  1.98it/s, recall_0.3=(511, 512) / 930]eval:  47%|██████████████████████▍                         | 142/304 [01:22<01:28,  1.83it/s, recall_0.3=(511, 512) / 930]eval:  47%|██████████████████████▍                         | 142/304 [01:22<01:28,  1.83it/s, recall_0.3=(511, 512) / 930]eval:  47%|██████████████████████▌                         | 143/304 [01:22<01:26,  1.87it/s, recall_0.3=(511, 512) / 930]eval:  47%|██████████████████████▌                         | 143/304 [01:23<01:26,  1.87it/s, recall_0.3=(511, 512) / 930]eval:  47%|██████████████████████▋                         | 144/304 [01:23<01:23,  1.93it/s, recall_0.3=(511, 512) / 930]eval:  47%|██████████████████████▋                         | 144/304 [01:23<01:23,  1.93it/s, recall_0.3=(511, 512) / 930]eval:  48%|██████████████████████▉                         | 145/304 [01:23<01:22,  1.92it/s, recall_0.3=(511, 512) / 930]eval:  48%|██████████████████████▉                         | 145/304 [01:24<01:22,  1.92it/s, recall_0.3=(511, 512) / 930]eval:  48%|███████████████████████                         | 146/304 [01:24<01:19,  1.98it/s, recall_0.3=(511, 512) / 930]eval:  48%|███████████████████████                         | 146/304 [01:24<01:19,  1.98it/s, recall_0.3=(513, 514) / 936]eval:  48%|███████████████████████▏                        | 147/304 [01:24<01:15,  2.07it/s, recall_0.3=(513, 514) / 936]eval:  48%|███████████████████████▏                        | 147/304 [01:25<01:15,  2.07it/s, recall_0.3=(517, 518) / 947]eval:  49%|███████████████████████▎                        | 148/304 [01:25<01:23,  1.86it/s, recall_0.3=(517, 518) / 947]eval:  49%|███████████████████████▎                        | 148/304 [01:26<01:23,  1.86it/s, recall_0.3=(522, 523) / 960]eval:  49%|███████████████████████▌                        | 149/304 [01:26<01:31,  1.70it/s, recall_0.3=(522, 523) / 960]eval:  49%|███████████████████████▌                        | 149/304 [01:27<01:31,  1.70it/s, recall_0.3=(527, 528) / 970]eval:  49%|███████████████████████▋                        | 150/304 [01:27<01:43,  1.49it/s, recall_0.3=(527, 528) / 970]eval:  49%|███████████████████████▋                        | 150/304 [01:27<01:43,  1.49it/s, recall_0.3=(530, 531) / 981]eval:  50%|███████████████████████▊                        | 151/304 [01:27<01:45,  1.44it/s, recall_0.3=(530, 531) / 981]eval:  50%|███████████████████████▊                        | 151/304 [01:28<01:45,  1.44it/s, recall_0.3=(535, 536) / 992]eval:  50%|████████████████████████                        | 152/304 [01:28<01:42,  1.48it/s, recall_0.3=(535, 536) / 992]eval:  50%|███████████████████████▌                       | 152/304 [01:29<01:42,  1.48it/s, recall_0.3=(539, 540) / 1001]eval:  50%|███████████████████████▋                       | 153/304 [01:29<01:42,  1.47it/s, recall_0.3=(539, 540) / 1001]eval:  50%|███████████████████████▋                       | 153/304 [01:29<01:42,  1.47it/s, recall_0.3=(541, 542) / 1011]eval:  51%|███████████████████████▊                       | 154/304 [01:29<01:44,  1.43it/s, recall_0.3=(541, 542) / 1011]eval:  51%|███████████████████████▊                       | 154/304 [01:30<01:44,  1.43it/s, recall_0.3=(544, 545) / 1022]eval:  51%|███████████████████████▉                       | 155/304 [01:30<01:42,  1.45it/s, recall_0.3=(544, 545) / 1022]eval:  51%|███████████████████████▉                       | 155/304 [01:31<01:42,  1.45it/s, recall_0.3=(546, 547) / 1030]eval:  51%|████████████████████████                       | 156/304 [01:31<01:43,  1.43it/s, recall_0.3=(546, 547) / 1030]eval:  51%|████████████████████████                       | 156/304 [01:31<01:43,  1.43it/s, recall_0.3=(551, 552) / 1038]eval:  52%|████████████████████████▎                      | 157/304 [01:31<01:35,  1.53it/s, recall_0.3=(551, 552) / 1038]eval:  52%|████████████████████████▎                      | 157/304 [01:32<01:35,  1.53it/s, recall_0.3=(556, 557) / 1046]eval:  52%|████████████████████████▍                      | 158/304 [01:32<01:30,  1.62it/s, recall_0.3=(556, 557) / 1046]eval:  52%|████████████████████████▍                      | 158/304 [01:32<01:30,  1.62it/s, recall_0.3=(560, 561) / 1050]eval:  52%|████████████████████████▌                      | 159/304 [01:32<01:22,  1.76it/s, recall_0.3=(560, 561) / 1050]eval:  52%|████████████████████████▌                      | 159/304 [01:33<01:22,  1.76it/s, recall_0.3=(562, 563) / 1053]eval:  53%|████████████████████████▋                      | 160/304 [01:33<01:15,  1.90it/s, recall_0.3=(562, 563) / 1053]eval:  53%|████████████████████████▋                      | 160/304 [01:33<01:15,  1.90it/s, recall_0.3=(562, 563) / 1053]eval:  53%|████████████████████████▉                      | 161/304 [01:33<01:09,  2.07it/s, recall_0.3=(562, 563) / 1053]eval:  53%|████████████████████████▉                      | 161/304 [01:33<01:09,  2.07it/s, recall_0.3=(562, 563) / 1053]eval:  53%|█████████████████████████                      | 162/304 [01:33<01:02,  2.27it/s, recall_0.3=(562, 563) / 1053]eval:  53%|█████████████████████████                      | 162/304 [01:34<01:02,  2.27it/s, recall_0.3=(563, 564) / 1055]eval:  54%|█████████████████████████▏                     | 163/304 [01:34<01:03,  2.23it/s, recall_0.3=(563, 564) / 1055]eval:  54%|█████████████████████████▏                     | 163/304 [01:34<01:03,  2.23it/s, recall_0.3=(564, 565) / 1059]eval:  54%|█████████████████████████▎                     | 164/304 [01:34<00:56,  2.50it/s, recall_0.3=(564, 565) / 1059]eval:  54%|█████████████████████████▎                     | 164/304 [01:34<00:56,  2.50it/s, recall_0.3=(568, 569) / 1067]eval:  54%|█████████████████████████▌                     | 165/304 [01:35<00:49,  2.79it/s, recall_0.3=(568, 569) / 1067]eval:  54%|█████████████████████████▌                     | 165/304 [01:35<00:49,  2.79it/s, recall_0.3=(573, 574) / 1075]eval:  55%|█████████████████████████▋                     | 166/304 [01:35<00:47,  2.90it/s, recall_0.3=(573, 574) / 1075]eval:  55%|█████████████████████████▋                     | 166/304 [01:35<00:47,  2.90it/s, recall_0.3=(579, 580) / 1083]eval:  55%|█████████████████████████▊                     | 167/304 [01:35<00:50,  2.70it/s, recall_0.3=(579, 580) / 1083]eval:  55%|█████████████████████████▊                     | 167/304 [01:36<00:50,  2.70it/s, recall_0.3=(580, 581) / 1091]eval:  55%|█████████████████████████▉                     | 168/304 [01:36<00:51,  2.63it/s, recall_0.3=(580, 581) / 1091]eval:  55%|█████████████████████████▉                     | 168/304 [01:36<00:51,  2.63it/s, recall_0.3=(585, 587) / 1099]eval:  56%|██████████████████████████▏                    | 169/304 [01:36<00:49,  2.70it/s, recall_0.3=(585, 587) / 1099]eval:  56%|██████████████████████████▏                    | 169/304 [01:36<00:49,  2.70it/s, recall_0.3=(589, 591) / 1105]eval:  56%|██████████████████████████▎                    | 170/304 [01:37<00:55,  2.41it/s, recall_0.3=(589, 591) / 1105]eval:  56%|██████████████████████████▎                    | 170/304 [01:37<00:55,  2.41it/s, recall_0.3=(590, 592) / 1107]eval:  56%|██████████████████████████▍                    | 171/304 [01:37<00:58,  2.27it/s, recall_0.3=(590, 592) / 1107]eval:  56%|██████████████████████████▍                    | 171/304 [01:37<00:58,  2.27it/s, recall_0.3=(594, 596) / 1112]eval:  57%|██████████████████████████▌                    | 172/304 [01:38<01:00,  2.17it/s, recall_0.3=(594, 596) / 1112]eval:  57%|██████████████████████████▌                    | 172/304 [01:38<01:00,  2.17it/s, recall_0.3=(597, 601) / 1120]eval:  57%|██████████████████████████▋                    | 173/304 [01:38<01:01,  2.12it/s, recall_0.3=(597, 601) / 1120]eval:  57%|██████████████████████████▋                    | 173/304 [01:39<01:01,  2.12it/s, recall_0.3=(600, 604) / 1128]eval:  57%|██████████████████████████▉                    | 174/304 [01:39<01:07,  1.93it/s, recall_0.3=(600, 604) / 1128]eval:  57%|██████████████████████████▉                    | 174/304 [01:39<01:07,  1.93it/s, recall_0.3=(603, 607) / 1134]eval:  58%|███████████████████████████                    | 175/304 [01:39<00:59,  2.16it/s, recall_0.3=(603, 607) / 1134]eval:  58%|███████████████████████████                    | 175/304 [01:39<00:59,  2.16it/s, recall_0.3=(603, 607) / 1138]eval:  58%|███████████████████████████▏                   | 176/304 [01:39<00:57,  2.21it/s, recall_0.3=(603, 607) / 1138]eval:  58%|███████████████████████████▏                   | 176/304 [01:40<00:57,  2.21it/s, recall_0.3=(604, 608) / 1142]eval:  58%|███████████████████████████▎                   | 177/304 [01:40<00:56,  2.24it/s, recall_0.3=(604, 608) / 1142]eval:  58%|███████████████████████████▎                   | 177/304 [01:40<00:56,  2.24it/s, recall_0.3=(604, 608) / 1142]eval:  59%|███████████████████████████▌                   | 178/304 [01:40<00:56,  2.21it/s, recall_0.3=(604, 608) / 1142]eval:  59%|███████████████████████████▌                   | 178/304 [01:41<00:56,  2.21it/s, recall_0.3=(604, 608) / 1142]eval:  59%|███████████████████████████▋                   | 179/304 [01:41<00:55,  2.25it/s, recall_0.3=(604, 608) / 1142]eval:  59%|███████████████████████████▋                   | 179/304 [01:41<00:55,  2.25it/s, recall_0.3=(604, 608) / 1145]eval:  59%|███████████████████████████▊                   | 180/304 [01:41<00:54,  2.26it/s, recall_0.3=(604, 608) / 1145]eval:  59%|███████████████████████████▊                   | 180/304 [01:42<00:54,  2.26it/s, recall_0.3=(606, 610) / 1147]eval:  60%|███████████████████████████▉                   | 181/304 [01:42<00:52,  2.34it/s, recall_0.3=(606, 610) / 1147]eval:  60%|███████████████████████████▉                   | 181/304 [01:42<00:52,  2.34it/s, recall_0.3=(607, 611) / 1149]eval:  60%|████████████████████████████▏                  | 182/304 [01:42<00:53,  2.29it/s, recall_0.3=(607, 611) / 1149]eval:  60%|████████████████████████████▏                  | 182/304 [01:42<00:53,  2.29it/s, recall_0.3=(607, 611) / 1149]eval:  60%|████████████████████████████▎                  | 183/304 [01:42<00:53,  2.26it/s, recall_0.3=(607, 611) / 1149]eval:  60%|████████████████████████████▎                  | 183/304 [01:43<00:53,  2.26it/s, recall_0.3=(607, 611) / 1149]eval:  61%|████████████████████████████▍                  | 184/304 [01:43<00:52,  2.30it/s, recall_0.3=(607, 611) / 1149]eval:  61%|████████████████████████████▍                  | 184/304 [01:43<00:52,  2.30it/s, recall_0.3=(607, 611) / 1149]eval:  61%|████████████████████████████▌                  | 185/304 [01:43<00:56,  2.12it/s, recall_0.3=(607, 611) / 1149]eval:  61%|████████████████████████████▌                  | 185/304 [01:44<00:56,  2.12it/s, recall_0.3=(607, 611) / 1149]eval:  61%|████████████████████████████▊                  | 186/304 [01:44<00:59,  1.99it/s, recall_0.3=(607, 611) / 1149]eval:  61%|████████████████████████████▊                  | 186/304 [01:44<00:59,  1.99it/s, recall_0.3=(607, 611) / 1149]eval:  62%|████████████████████████████▉                  | 187/304 [01:44<00:57,  2.05it/s, recall_0.3=(607, 611) / 1149]eval:  62%|████████████████████████████▉                  | 187/304 [01:45<00:57,  2.05it/s, recall_0.3=(607, 611) / 1149]eval:  62%|█████████████████████████████                  | 188/304 [01:45<00:54,  2.11it/s, recall_0.3=(607, 611) / 1149]eval:  62%|█████████████████████████████                  | 188/304 [01:45<00:54,  2.11it/s, recall_0.3=(607, 611) / 1149]eval:  62%|█████████████████████████████▏                 | 189/304 [01:45<00:55,  2.09it/s, recall_0.3=(607, 611) / 1149]eval:  62%|█████████████████████████████▏                 | 189/304 [01:46<00:55,  2.09it/s, recall_0.3=(607, 611) / 1149]eval:  62%|█████████████████████████████▍                 | 190/304 [01:46<00:55,  2.04it/s, recall_0.3=(607, 611) / 1149]eval:  62%|█████████████████████████████▍                 | 190/304 [01:47<00:55,  2.04it/s, recall_0.3=(607, 611) / 1149]eval:  63%|█████████████████████████████▌                 | 191/304 [01:47<01:00,  1.88it/s, recall_0.3=(607, 611) / 1149]eval:  63%|█████████████████████████████▌                 | 191/304 [01:47<01:00,  1.88it/s, recall_0.3=(608, 612) / 1153]eval:  63%|█████████████████████████████▋                 | 192/304 [01:47<00:57,  1.94it/s, recall_0.3=(608, 612) / 1153]eval:  63%|█████████████████████████████▋                 | 192/304 [01:48<00:57,  1.94it/s, recall_0.3=(608, 612) / 1157]eval:  63%|█████████████████████████████▊                 | 193/304 [01:48<00:58,  1.89it/s, recall_0.3=(608, 612) / 1157]eval:  63%|█████████████████████████████▊                 | 193/304 [01:48<00:58,  1.89it/s, recall_0.3=(610, 614) / 1161]eval:  64%|█████████████████████████████▉                 | 194/304 [01:48<00:58,  1.89it/s, recall_0.3=(610, 614) / 1161]eval:  64%|█████████████████████████████▉                 | 194/304 [01:49<00:58,  1.89it/s, recall_0.3=(611, 615) / 1165]eval:  64%|██████████████████████████████▏                | 195/304 [01:49<00:58,  1.87it/s, recall_0.3=(611, 615) / 1165]eval:  64%|██████████████████████████████▏                | 195/304 [01:49<00:58,  1.87it/s, recall_0.3=(614, 618) / 1169]eval:  64%|██████████████████████████████▎                | 196/304 [01:49<00:59,  1.81it/s, recall_0.3=(614, 618) / 1169]eval:  64%|██████████████████████████████▎                | 196/304 [01:50<00:59,  1.81it/s, recall_0.3=(616, 620) / 1171]eval:  65%|██████████████████████████████▍                | 197/304 [01:50<00:59,  1.81it/s, recall_0.3=(616, 620) / 1171]eval:  65%|██████████████████████████████▍                | 197/304 [01:50<00:59,  1.81it/s, recall_0.3=(616, 620) / 1173]eval:  65%|██████████████████████████████▌                | 198/304 [01:50<00:59,  1.77it/s, recall_0.3=(616, 620) / 1173]eval:  65%|██████████████████████████████▌                | 198/304 [01:51<00:59,  1.77it/s, recall_0.3=(616, 620) / 1173]eval:  65%|██████████████████████████████▊                | 199/304 [01:51<00:54,  1.93it/s, recall_0.3=(616, 620) / 1173]eval:  65%|██████████████████████████████▊                | 199/304 [01:51<00:54,  1.93it/s, recall_0.3=(616, 620) / 1175]eval:  66%|██████████████████████████████▉                | 200/304 [01:51<00:52,  1.97it/s, recall_0.3=(616, 620) / 1175]eval:  66%|██████████████████████████████▉                | 200/304 [01:52<00:52,  1.97it/s, recall_0.3=(617, 621) / 1177]eval:  66%|███████████████████████████████                | 201/304 [01:52<00:50,  2.06it/s, recall_0.3=(617, 621) / 1177]eval:  66%|███████████████████████████████                | 201/304 [01:52<00:50,  2.06it/s, recall_0.3=(618, 622) / 1179]eval:  66%|███████████████████████████████▏               | 202/304 [01:52<00:46,  2.21it/s, recall_0.3=(618, 622) / 1179]eval:  66%|███████████████████████████████▏               | 202/304 [01:53<00:46,  2.21it/s, recall_0.3=(619, 623) / 1181]eval:  67%|███████████████████████████████▍               | 203/304 [01:53<00:46,  2.18it/s, recall_0.3=(619, 623) / 1181]eval:  67%|███████████████████████████████▍               | 203/304 [01:53<00:46,  2.18it/s, recall_0.3=(620, 624) / 1183]eval:  67%|███████████████████████████████▌               | 204/304 [01:53<00:44,  2.24it/s, recall_0.3=(620, 624) / 1183]eval:  67%|███████████████████████████████▌               | 204/304 [01:53<00:44,  2.24it/s, recall_0.3=(620, 624) / 1183]eval:  67%|███████████████████████████████▋               | 205/304 [01:53<00:44,  2.23it/s, recall_0.3=(620, 624) / 1183]eval:  67%|███████████████████████████████▋               | 205/304 [01:54<00:44,  2.23it/s, recall_0.3=(620, 624) / 1183]eval:  68%|███████████████████████████████▊               | 206/304 [01:54<00:50,  1.93it/s, recall_0.3=(620, 624) / 1183]eval:  68%|███████████████████████████████▊               | 206/304 [01:55<00:50,  1.93it/s, recall_0.3=(620, 624) / 1183]eval:  68%|████████████████████████████████               | 207/304 [01:55<00:52,  1.85it/s, recall_0.3=(620, 624) / 1183]eval:  68%|████████████████████████████████               | 207/304 [01:55<00:52,  1.85it/s, recall_0.3=(620, 624) / 1183]eval:  68%|████████████████████████████████▏              | 208/304 [01:55<00:49,  1.93it/s, recall_0.3=(620, 624) / 1183]eval:  68%|████████████████████████████████▏              | 208/304 [01:56<00:49,  1.93it/s, recall_0.3=(630, 634) / 1198]eval:  69%|████████████████████████████████▎              | 209/304 [01:56<00:47,  1.99it/s, recall_0.3=(630, 634) / 1198]eval:  69%|████████████████████████████████▎              | 209/304 [01:56<00:47,  1.99it/s, recall_0.3=(637, 641) / 1216]eval:  69%|████████████████████████████████▍              | 210/304 [01:56<00:44,  2.12it/s, recall_0.3=(637, 641) / 1216]eval:  69%|████████████████████████████████▍              | 210/304 [01:57<00:44,  2.12it/s, recall_0.3=(644, 648) / 1229]eval:  69%|████████████████████████████████▌              | 211/304 [01:57<00:45,  2.04it/s, recall_0.3=(644, 648) / 1229]eval:  69%|████████████████████████████████▌              | 211/304 [01:57<00:45,  2.04it/s, recall_0.3=(654, 658) / 1242]eval:  70%|████████████████████████████████▊              | 212/304 [01:57<00:46,  1.96it/s, recall_0.3=(654, 658) / 1242]eval:  70%|████████████████████████████████▊              | 212/304 [01:58<00:46,  1.96it/s, recall_0.3=(660, 664) / 1251]eval:  70%|████████████████████████████████▉              | 213/304 [01:58<00:49,  1.85it/s, recall_0.3=(660, 664) / 1251]eval:  70%|████████████████████████████████▉              | 213/304 [01:58<00:49,  1.85it/s, recall_0.3=(668, 672) / 1262]eval:  70%|█████████████████████████████████              | 214/304 [01:58<00:50,  1.77it/s, recall_0.3=(668, 672) / 1262]eval:  70%|█████████████████████████████████              | 214/304 [01:59<00:50,  1.77it/s, recall_0.3=(674, 678) / 1271]eval:  71%|█████████████████████████████████▏             | 215/304 [01:59<00:46,  1.91it/s, recall_0.3=(674, 678) / 1271]eval:  71%|█████████████████████████████████▏             | 215/304 [01:59<00:46,  1.91it/s, recall_0.3=(677, 681) / 1282]eval:  71%|█████████████████████████████████▍             | 216/304 [01:59<00:40,  2.17it/s, recall_0.3=(677, 681) / 1282]eval:  71%|█████████████████████████████████▍             | 216/304 [02:00<00:40,  2.17it/s, recall_0.3=(682, 687) / 1294]eval:  71%|█████████████████████████████████▌             | 217/304 [02:00<00:38,  2.26it/s, recall_0.3=(682, 687) / 1294]eval:  71%|█████████████████████████████████▌             | 217/304 [02:00<00:38,  2.26it/s, recall_0.3=(685, 689) / 1304]eval:  72%|█████████████████████████████████▋             | 218/304 [02:00<00:38,  2.24it/s, recall_0.3=(685, 689) / 1304]eval:  72%|█████████████████████████████████▋             | 218/304 [02:01<00:38,  2.24it/s, recall_0.3=(686, 690) / 1309]eval:  72%|█████████████████████████████████▊             | 219/304 [02:01<00:39,  2.13it/s, recall_0.3=(686, 690) / 1309]eval:  72%|█████████████████████████████████▊             | 219/304 [02:01<00:39,  2.13it/s, recall_0.3=(686, 690) / 1309]eval:  72%|██████████████████████████████████             | 220/304 [02:01<00:36,  2.32it/s, recall_0.3=(686, 690) / 1309]eval:  72%|██████████████████████████████████             | 220/304 [02:01<00:36,  2.32it/s, recall_0.3=(686, 690) / 1309]eval:  73%|██████████████████████████████████▏            | 221/304 [02:01<00:35,  2.34it/s, recall_0.3=(686, 690) / 1309]eval:  73%|██████████████████████████████████▏            | 221/304 [02:02<00:35,  2.34it/s, recall_0.3=(686, 690) / 1309]eval:  73%|██████████████████████████████████▎            | 222/304 [02:02<00:34,  2.39it/s, recall_0.3=(686, 690) / 1309]eval:  73%|██████████████████████████████████▎            | 222/304 [02:02<00:34,  2.39it/s, recall_0.3=(687, 691) / 1311]eval:  73%|██████████████████████████████████▍            | 223/304 [02:02<00:35,  2.25it/s, recall_0.3=(687, 691) / 1311]eval:  73%|██████████████████████████████████▍            | 223/304 [02:03<00:35,  2.25it/s, recall_0.3=(688, 692) / 1313]eval:  74%|██████████████████████████████████▋            | 224/304 [02:03<00:33,  2.37it/s, recall_0.3=(688, 692) / 1313]eval:  74%|██████████████████████████████████▋            | 224/304 [02:03<00:33,  2.37it/s, recall_0.3=(688, 692) / 1315]eval:  74%|██████████████████████████████████▊            | 225/304 [02:03<00:34,  2.31it/s, recall_0.3=(688, 692) / 1315]eval:  74%|██████████████████████████████████▊            | 225/304 [02:03<00:34,  2.31it/s, recall_0.3=(688, 692) / 1319]eval:  74%|██████████████████████████████████▉            | 226/304 [02:03<00:34,  2.24it/s, recall_0.3=(688, 692) / 1319]eval:  74%|██████████████████████████████████▉            | 226/304 [02:04<00:34,  2.24it/s, recall_0.3=(699, 703) / 1336]eval:  75%|███████████████████████████████████            | 227/304 [02:04<00:32,  2.36it/s, recall_0.3=(699, 703) / 1336]eval:  75%|███████████████████████████████████            | 227/304 [02:04<00:32,  2.36it/s, recall_0.3=(708, 712) / 1348]eval:  75%|███████████████████████████████████▎           | 228/304 [02:04<00:32,  2.36it/s, recall_0.3=(708, 712) / 1348]eval:  75%|███████████████████████████████████▎           | 228/304 [02:05<00:32,  2.36it/s, recall_0.3=(713, 717) / 1355]eval:  75%|███████████████████████████████████▍           | 229/304 [02:05<00:32,  2.32it/s, recall_0.3=(713, 717) / 1355]eval:  75%|███████████████████████████████████▍           | 229/304 [02:05<00:32,  2.32it/s, recall_0.3=(718, 722) / 1361]eval:  76%|███████████████████████████████████▌           | 230/304 [02:05<00:33,  2.18it/s, recall_0.3=(718, 722) / 1361]eval:  76%|███████████████████████████████████▌           | 230/304 [02:06<00:33,  2.18it/s, recall_0.3=(721, 725) / 1367]eval:  76%|███████████████████████████████████▋           | 231/304 [02:06<00:34,  2.09it/s, recall_0.3=(721, 725) / 1367]eval:  76%|███████████████████████████████████▋           | 231/304 [02:06<00:34,  2.09it/s, recall_0.3=(722, 726) / 1370]eval:  76%|███████████████████████████████████▊           | 232/304 [02:06<00:32,  2.21it/s, recall_0.3=(722, 726) / 1370]eval:  76%|███████████████████████████████████▊           | 232/304 [02:06<00:32,  2.21it/s, recall_0.3=(722, 726) / 1370]eval:  77%|████████████████████████████████████           | 233/304 [02:06<00:29,  2.38it/s, recall_0.3=(722, 726) / 1370]eval:  77%|████████████████████████████████████           | 233/304 [02:07<00:29,  2.38it/s, recall_0.3=(722, 726) / 1370]eval:  77%|████████████████████████████████████▏          | 234/304 [02:07<00:30,  2.26it/s, recall_0.3=(722, 726) / 1370]eval:  77%|████████████████████████████████████▏          | 234/304 [02:07<00:30,  2.26it/s, recall_0.3=(722, 726) / 1370]eval:  77%|████████████████████████████████████▎          | 235/304 [02:07<00:30,  2.24it/s, recall_0.3=(722, 726) / 1370]eval:  77%|████████████████████████████████████▎          | 235/304 [02:08<00:30,  2.24it/s, recall_0.3=(722, 726) / 1370]eval:  78%|████████████████████████████████████▍          | 236/304 [02:08<00:32,  2.11it/s, recall_0.3=(722, 726) / 1370]eval:  78%|████████████████████████████████████▍          | 236/304 [02:09<00:32,  2.11it/s, recall_0.3=(722, 726) / 1370]eval:  78%|████████████████████████████████████▋          | 237/304 [02:09<00:34,  1.96it/s, recall_0.3=(722, 726) / 1370]eval:  78%|████████████████████████████████████▋          | 237/304 [02:09<00:34,  1.96it/s, recall_0.3=(722, 726) / 1370]eval:  78%|████████████████████████████████████▊          | 238/304 [02:09<00:33,  1.95it/s, recall_0.3=(722, 726) / 1370]eval:  78%|████████████████████████████████████▊          | 238/304 [02:10<00:33,  1.95it/s, recall_0.3=(722, 726) / 1370]eval:  79%|████████████████████████████████████▉          | 239/304 [02:10<00:34,  1.88it/s, recall_0.3=(722, 726) / 1370]eval:  79%|████████████████████████████████████▉          | 239/304 [02:10<00:34,  1.88it/s, recall_0.3=(722, 726) / 1370]eval:  79%|█████████████████████████████████████          | 240/304 [02:10<00:33,  1.90it/s, recall_0.3=(722, 726) / 1370]eval:  79%|█████████████████████████████████████          | 240/304 [02:11<00:33,  1.90it/s, recall_0.3=(723, 727) / 1372]eval:  79%|█████████████████████████████████████▎         | 241/304 [02:11<00:33,  1.87it/s, recall_0.3=(723, 727) / 1372]eval:  79%|█████████████████████████████████████▎         | 241/304 [02:11<00:33,  1.87it/s, recall_0.3=(725, 729) / 1374]eval:  80%|█████████████████████████████████████▍         | 242/304 [02:11<00:36,  1.71it/s, recall_0.3=(725, 729) / 1374]eval:  80%|█████████████████████████████████████▍         | 242/304 [02:12<00:36,  1.71it/s, recall_0.3=(727, 731) / 1376]eval:  80%|█████████████████████████████████████▌         | 243/304 [02:12<00:33,  1.82it/s, recall_0.3=(727, 731) / 1376]eval:  80%|█████████████████████████████████████▌         | 243/304 [02:12<00:33,  1.82it/s, recall_0.3=(728, 732) / 1378]eval:  80%|█████████████████████████████████████▋         | 244/304 [02:12<00:32,  1.83it/s, recall_0.3=(728, 732) / 1378]eval:  80%|█████████████████████████████████████▋         | 244/304 [02:13<00:32,  1.83it/s, recall_0.3=(730, 734) / 1382]eval:  81%|█████████████████████████████████████▉         | 245/304 [02:13<00:33,  1.76it/s, recall_0.3=(730, 734) / 1382]eval:  81%|█████████████████████████████████████▉         | 245/304 [02:14<00:33,  1.76it/s, recall_0.3=(735, 739) / 1387]eval:  81%|██████████████████████████████████████         | 246/304 [02:14<00:34,  1.68it/s, recall_0.3=(735, 739) / 1387]eval:  81%|██████████████████████████████████████         | 246/304 [02:14<00:34,  1.68it/s, recall_0.3=(740, 744) / 1393]eval:  81%|██████████████████████████████████████▏        | 247/304 [02:14<00:35,  1.62it/s, recall_0.3=(740, 744) / 1393]eval:  81%|██████████████████████████████████████▏        | 247/304 [02:15<00:35,  1.62it/s, recall_0.3=(741, 745) / 1401]eval:  82%|██████████████████████████████████████▎        | 248/304 [02:15<00:35,  1.58it/s, recall_0.3=(741, 745) / 1401]eval:  82%|██████████████████████████████████████▎        | 248/304 [02:16<00:35,  1.58it/s, recall_0.3=(746, 750) / 1408]eval:  82%|██████████████████████████████████████▍        | 249/304 [02:16<00:34,  1.57it/s, recall_0.3=(746, 750) / 1408]eval:  82%|██████████████████████████████████████▍        | 249/304 [02:16<00:34,  1.57it/s, recall_0.3=(750, 754) / 1413]eval:  82%|██████████████████████████████████████▋        | 250/304 [02:16<00:33,  1.61it/s, recall_0.3=(750, 754) / 1413]eval:  82%|██████████████████████████████████████▋        | 250/304 [02:17<00:33,  1.61it/s, recall_0.3=(751, 755) / 1416]eval:  83%|██████████████████████████████████████▊        | 251/304 [02:17<00:31,  1.66it/s, recall_0.3=(751, 755) / 1416]eval:  83%|██████████████████████████████████████▊        | 251/304 [02:17<00:31,  1.66it/s, recall_0.3=(752, 756) / 1418]eval:  83%|██████████████████████████████████████▉        | 252/304 [02:17<00:29,  1.76it/s, recall_0.3=(752, 756) / 1418]eval:  83%|██████████████████████████████████████▉        | 252/304 [02:18<00:29,  1.76it/s, recall_0.3=(752, 756) / 1420]eval:  83%|███████████████████████████████████████        | 253/304 [02:18<00:28,  1.77it/s, recall_0.3=(752, 756) / 1420]eval:  83%|███████████████████████████████████████        | 253/304 [02:18<00:28,  1.77it/s, recall_0.3=(752, 756) / 1420]eval:  84%|███████████████████████████████████████▎       | 254/304 [02:18<00:27,  1.81it/s, recall_0.3=(752, 756) / 1420]eval:  84%|███████████████████████████████████████▎       | 254/304 [02:19<00:27,  1.81it/s, recall_0.3=(754, 758) / 1422]eval:  84%|███████████████████████████████████████▍       | 255/304 [02:19<00:26,  1.82it/s, recall_0.3=(754, 758) / 1422]eval:  84%|███████████████████████████████████████▍       | 255/304 [02:19<00:26,  1.82it/s, recall_0.3=(755, 759) / 1424]eval:  84%|███████████████████████████████████████▌       | 256/304 [02:19<00:26,  1.84it/s, recall_0.3=(755, 759) / 1424]eval:  84%|███████████████████████████████████████▌       | 256/304 [02:20<00:26,  1.84it/s, recall_0.3=(755, 759) / 1424]eval:  85%|███████████████████████████████████████▋       | 257/304 [02:20<00:25,  1.83it/s, recall_0.3=(755, 759) / 1424]eval:  85%|███████████████████████████████████████▋       | 257/304 [02:21<00:25,  1.83it/s, recall_0.3=(755, 759) / 1424]eval:  85%|███████████████████████████████████████▉       | 258/304 [02:21<00:25,  1.82it/s, recall_0.3=(755, 759) / 1424]eval:  85%|███████████████████████████████████████▉       | 258/304 [02:21<00:25,  1.82it/s, recall_0.3=(755, 759) / 1424]eval:  85%|████████████████████████████████████████       | 259/304 [02:21<00:21,  2.06it/s, recall_0.3=(755, 759) / 1424]eval:  85%|████████████████████████████████████████       | 259/304 [02:21<00:21,  2.06it/s, recall_0.3=(756, 760) / 1426]eval:  86%|████████████████████████████████████████▏      | 260/304 [02:21<00:20,  2.18it/s, recall_0.3=(756, 760) / 1426]eval:  86%|████████████████████████████████████████▏      | 260/304 [02:22<00:20,  2.18it/s, recall_0.3=(758, 762) / 1430]eval:  86%|████████████████████████████████████████▎      | 261/304 [02:22<00:17,  2.52it/s, recall_0.3=(758, 762) / 1430]eval:  86%|████████████████████████████████████████▎      | 261/304 [02:22<00:17,  2.52it/s, recall_0.3=(758, 762) / 1432]eval:  86%|████████████████████████████████████████▌      | 262/304 [02:22<00:17,  2.35it/s, recall_0.3=(758, 762) / 1432]eval:  86%|████████████████████████████████████████▌      | 262/304 [02:23<00:17,  2.35it/s, recall_0.3=(758, 762) / 1432]eval:  87%|████████████████████████████████████████▋      | 263/304 [02:23<00:17,  2.28it/s, recall_0.3=(758, 762) / 1432]eval:  87%|████████████████████████████████████████▋      | 263/304 [02:23<00:17,  2.28it/s, recall_0.3=(758, 762) / 1432]eval:  87%|████████████████████████████████████████▊      | 264/304 [02:23<00:18,  2.18it/s, recall_0.3=(758, 762) / 1432]eval:  87%|████████████████████████████████████████▊      | 264/304 [02:23<00:18,  2.18it/s, recall_0.3=(758, 762) / 1432]eval:  87%|████████████████████████████████████████▉      | 265/304 [02:23<00:16,  2.31it/s, recall_0.3=(758, 762) / 1432]eval:  87%|████████████████████████████████████████▉      | 265/304 [02:24<00:16,  2.31it/s, recall_0.3=(758, 762) / 1432]eval:  88%|█████████████████████████████████████████▏     | 266/304 [02:24<00:16,  2.25it/s, recall_0.3=(758, 762) / 1432]eval:  88%|█████████████████████████████████████████▏     | 266/304 [02:24<00:16,  2.25it/s, recall_0.3=(758, 762) / 1432]eval:  88%|█████████████████████████████████████████▎     | 267/304 [02:24<00:17,  2.15it/s, recall_0.3=(758, 762) / 1432]eval:  88%|█████████████████████████████████████████▎     | 267/304 [02:25<00:17,  2.15it/s, recall_0.3=(760, 764) / 1435]eval:  88%|█████████████████████████████████████████▍     | 268/304 [02:25<00:17,  2.06it/s, recall_0.3=(760, 764) / 1435]eval:  88%|█████████████████████████████████████████▍     | 268/304 [02:25<00:17,  2.06it/s, recall_0.3=(762, 766) / 1439]eval:  88%|█████████████████████████████████████████▌     | 269/304 [02:25<00:15,  2.26it/s, recall_0.3=(762, 766) / 1439]eval:  88%|█████████████████████████████████████████▌     | 269/304 [02:26<00:15,  2.26it/s, recall_0.3=(763, 767) / 1443]eval:  89%|█████████████████████████████████████████▋     | 270/304 [02:26<00:14,  2.30it/s, recall_0.3=(763, 767) / 1443]eval:  89%|█████████████████████████████████████████▋     | 270/304 [02:26<00:14,  2.30it/s, recall_0.3=(763, 767) / 1445]eval:  89%|█████████████████████████████████████████▉     | 271/304 [02:26<00:14,  2.30it/s, recall_0.3=(763, 767) / 1445]eval:  89%|█████████████████████████████████████████▉     | 271/304 [02:27<00:14,  2.30it/s, recall_0.3=(763, 767) / 1449]eval:  89%|██████████████████████████████████████████     | 272/304 [02:27<00:14,  2.27it/s, recall_0.3=(763, 767) / 1449]eval:  89%|██████████████████████████████████████████     | 272/304 [02:27<00:14,  2.27it/s, recall_0.3=(764, 769) / 1453]eval:  90%|██████████████████████████████████████████▏    | 273/304 [02:27<00:14,  2.08it/s, recall_0.3=(764, 769) / 1453]eval:  90%|██████████████████████████████████████████▏    | 273/304 [02:28<00:14,  2.08it/s, recall_0.3=(766, 771) / 1457]eval:  90%|██████████████████████████████████████████▎    | 274/304 [02:28<00:14,  2.10it/s, recall_0.3=(766, 771) / 1457]eval:  90%|██████████████████████████████████████████▎    | 274/304 [02:28<00:14,  2.10it/s, recall_0.3=(769, 774) / 1460]eval:  90%|██████████████████████████████████████████▌    | 275/304 [02:28<00:14,  2.05it/s, recall_0.3=(769, 774) / 1460]eval:  90%|██████████████████████████████████████████▌    | 275/304 [02:29<00:14,  2.05it/s, recall_0.3=(771, 776) / 1462]eval:  91%|██████████████████████████████████████████▋    | 276/304 [02:29<00:13,  2.15it/s, recall_0.3=(771, 776) / 1462]eval:  91%|██████████████████████████████████████████▋    | 276/304 [02:29<00:13,  2.15it/s, recall_0.3=(773, 778) / 1464]eval:  91%|██████████████████████████████████████████▊    | 277/304 [02:29<00:13,  1.96it/s, recall_0.3=(773, 778) / 1464]eval:  91%|██████████████████████████████████████████▊    | 277/304 [02:30<00:13,  1.96it/s, recall_0.3=(773, 778) / 1464]eval:  91%|██████████████████████████████████████████▉    | 278/304 [02:30<00:13,  1.93it/s, recall_0.3=(773, 778) / 1464]eval:  91%|██████████████████████████████████████████▉    | 278/304 [02:30<00:13,  1.93it/s, recall_0.3=(773, 778) / 1464]eval:  92%|███████████████████████████████████████████▏   | 279/304 [02:30<00:12,  1.95it/s, recall_0.3=(773, 778) / 1464]eval:  92%|███████████████████████████████████████████▏   | 279/304 [02:31<00:12,  1.95it/s, recall_0.3=(773, 778) / 1464]eval:  92%|███████████████████████████████████████████▎   | 280/304 [02:31<00:12,  1.96it/s, recall_0.3=(773, 778) / 1464]eval:  92%|███████████████████████████████████████████▎   | 280/304 [02:31<00:12,  1.96it/s, recall_0.3=(773, 778) / 1464]eval:  92%|███████████████████████████████████████████▍   | 281/304 [02:31<00:10,  2.11it/s, recall_0.3=(773, 778) / 1464]eval:  92%|███████████████████████████████████████████▍   | 281/304 [02:32<00:10,  2.11it/s, recall_0.3=(773, 778) / 1464]eval:  93%|███████████████████████████████████████████▌   | 282/304 [02:32<00:10,  2.09it/s, recall_0.3=(773, 778) / 1464]eval:  93%|███████████████████████████████████████████▌   | 282/304 [02:32<00:10,  2.09it/s, recall_0.3=(773, 778) / 1464]eval:  93%|███████████████████████████████████████████▊   | 283/304 [02:32<00:10,  2.09it/s, recall_0.3=(773, 778) / 1464]eval:  93%|███████████████████████████████████████████▊   | 283/304 [02:32<00:10,  2.09it/s, recall_0.3=(773, 778) / 1469]eval:  93%|███████████████████████████████████████████▉   | 284/304 [02:32<00:09,  2.21it/s, recall_0.3=(773, 778) / 1469]eval:  93%|███████████████████████████████████████████▉   | 284/304 [02:33<00:09,  2.21it/s, recall_0.3=(782, 787) / 1482]eval:  94%|████████████████████████████████████████████   | 285/304 [02:33<00:08,  2.21it/s, recall_0.3=(782, 787) / 1482]eval:  94%|████████████████████████████████████████████   | 285/304 [02:33<00:08,  2.21it/s, recall_0.3=(793, 798) / 1496]eval:  94%|████████████████████████████████████████████▏  | 286/304 [02:33<00:08,  2.16it/s, recall_0.3=(793, 798) / 1496]eval:  94%|████████████████████████████████████████████▏  | 286/304 [02:34<00:08,  2.16it/s, recall_0.3=(801, 807) / 1509]eval:  94%|████████████████████████████████████████████▎  | 287/304 [02:34<00:08,  2.10it/s, recall_0.3=(801, 807) / 1509]eval:  94%|████████████████████████████████████████████▎  | 287/304 [02:34<00:08,  2.10it/s, recall_0.3=(807, 813) / 1522]eval:  95%|████████████████████████████████████████████▌  | 288/304 [02:34<00:07,  2.11it/s, recall_0.3=(807, 813) / 1522]eval:  95%|████████████████████████████████████████████▌  | 288/304 [02:35<00:07,  2.11it/s, recall_0.3=(813, 819) / 1529]eval:  95%|████████████████████████████████████████████▋  | 289/304 [02:35<00:07,  2.14it/s, recall_0.3=(813, 819) / 1529]eval:  95%|████████████████████████████████████████████▋  | 289/304 [02:35<00:07,  2.14it/s, recall_0.3=(821, 827) / 1543]eval:  95%|████████████████████████████████████████████▊  | 290/304 [02:35<00:06,  2.14it/s, recall_0.3=(821, 827) / 1543]eval:  95%|████████████████████████████████████████████▊  | 290/304 [02:36<00:06,  2.14it/s, recall_0.3=(829, 835) / 1559]eval:  96%|████████████████████████████████████████████▉  | 291/304 [02:36<00:05,  2.23it/s, recall_0.3=(829, 835) / 1559]eval:  96%|████████████████████████████████████████████▉  | 291/304 [02:36<00:05,  2.23it/s, recall_0.3=(829, 835) / 1559]eval:  96%|█████████████████████████████████████████████▏ | 292/304 [02:36<00:04,  2.60it/s, recall_0.3=(829, 835) / 1559]eval:  96%|█████████████████████████████████████████████▏ | 292/304 [02:36<00:04,  2.60it/s, recall_0.3=(829, 835) / 1559]eval:  96%|█████████████████████████████████████████████▎ | 293/304 [02:36<00:03,  2.88it/s, recall_0.3=(829, 835) / 1559]eval:  96%|█████████████████████████████████████████████▎ | 293/304 [02:36<00:03,  2.88it/s, recall_0.3=(829, 835) / 1561]eval:  97%|█████████████████████████████████████████████▍ | 294/304 [02:36<00:03,  3.11it/s, recall_0.3=(829, 835) / 1561]eval:  97%|█████████████████████████████████████████████▍ | 294/304 [02:37<00:03,  3.11it/s, recall_0.3=(831, 837) / 1563]eval:  97%|█████████████████████████████████████████████▌ | 295/304 [02:37<00:02,  3.26it/s, recall_0.3=(831, 837) / 1563]eval:  97%|█████████████████████████████████████████████▌ | 295/304 [02:37<00:02,  3.26it/s, recall_0.3=(831, 837) / 1565]eval:  97%|█████████████████████████████████████████████▊ | 296/304 [02:37<00:02,  3.28it/s, recall_0.3=(831, 837) / 1565]eval:  97%|█████████████████████████████████████████████▊ | 296/304 [02:37<00:02,  3.28it/s, recall_0.3=(831, 837) / 1565]eval:  98%|█████████████████████████████████████████████▉ | 297/304 [02:37<00:02,  3.48it/s, recall_0.3=(831, 837) / 1565]eval:  98%|█████████████████████████████████████████████▉ | 297/304 [02:38<00:02,  3.48it/s, recall_0.3=(831, 837) / 1565]eval:  98%|██████████████████████████████████████████████ | 298/304 [02:38<00:01,  3.68it/s, recall_0.3=(831, 837) / 1565]eval:  98%|██████████████████████████████████████████████ | 298/304 [02:38<00:01,  3.68it/s, recall_0.3=(831, 837) / 1565]eval:  98%|██████████████████████████████████████████████▏| 299/304 [02:38<00:01,  3.79it/s, recall_0.3=(831, 837) / 1565]eval:  98%|██████████████████████████████████████████████▏| 299/304 [02:38<00:01,  3.79it/s, recall_0.3=(831, 837) / 1565]eval:  99%|██████████████████████████████████████████████▍| 300/304 [02:38<00:01,  3.67it/s, recall_0.3=(831, 837) / 1565]eval:  99%|██████████████████████████████████████████████▍| 300/304 [02:38<00:01,  3.67it/s, recall_0.3=(831, 837) / 1565]eval:  99%|██████████████████████████████████████████████▌| 301/304 [02:38<00:00,  3.69it/s, recall_0.3=(831, 837) / 1565]eval:  99%|██████████████████████████████████████████████▌| 301/304 [02:38<00:00,  3.69it/s, recall_0.3=(831, 837) / 1565]eval:  99%|██████████████████████████████████████████████▋| 302/304 [02:39<00:00,  4.17it/s, recall_0.3=(831, 837) / 1565]eval:  99%|██████████████████████████████████████████████▋| 302/304 [02:39<00:00,  4.17it/s, recall_0.3=(832, 838) / 1570]eval: 100%|██████████████████████████████████████████████▊| 303/304 [02:39<00:00,  4.50it/s, recall_0.3=(832, 838) / 1570]eval: 100%|██████████████████████████████████████████████▊| 303/304 [02:39<00:00,  4.50it/s, recall_0.3=(834, 841) / 1574]eval: 100%|███████████████████████████████████████████████| 304/304 [02:39<00:00,  4.69it/s, recall_0.3=(834, 841) / 1574]eval: 100%|███████████████████████████████████████████████| 304/304 [02:39<00:00,  1.91it/s, recall_0.3=(834, 841) / 1574]
2023-03-01 18:02:10,739   INFO  *************** Performance of EPOCH 10 *****************
2023-03-01 18:02:10,740   INFO  Generate label finished(sec_per_example: 0.0659 second).
2023-03-01 18:02:10,740   INFO  recall_roi_0.3: 0.541057
2023-03-01 18:02:10,740   INFO  recall_rcnn_0.3: 0.545878
2023-03-01 18:02:10,741   INFO  recall_roi_0.5: 0.418608
2023-03-01 18:02:10,741   INFO  recall_rcnn_0.5: 0.466656
2023-03-01 18:02:10,741   INFO  recall_roi_0.7: 0.149606
2023-03-01 18:02:10,742   INFO  recall_rcnn_0.7: 0.238792
2023-03-01 18:02:10,743   INFO  Average predicted number of objects(2432 samples): 14.895
2023-03-01 18:02:39,191   INFO  Car IoU 0.7:
RANGE 00-30   30-50   50-80   00-80 
BEV:  38.673, 29.890,  9.120, 28.407
3D :  18.642,  4.697,  1.969,  8.867
Car IoU 0.5:
RANGE 00-30   30-50   50-80   00-80 
BEV:  47.740, 42.907, 14.979, 38.351
3D :  44.562, 40.267, 12.635, 35.631
Car IoU 0.7:
38.7 / 18.6, 29.9 / 4.7, 9.1 / 2.0, 28.4 / 8.9
Car IoU 0.5:
47.7 / 44.6, 42.9 / 40.3, 15.0 / 12.6, 38.4 / 35.6

Pedestrian IoU 0.7:
RANGE 00-30   30-50   50-80   00-80 
BEV:  16.246, 10.145,  1.743,  8.762
3D :  10.772,  6.881,  0.500,  5.390
Pedestrian IoU 0.5:
RANGE 00-30   30-50   50-80   00-80 
BEV:  22.048, 15.890,  5.028, 13.805
3D :  22.048, 15.890,  5.028, 13.805
Pedestrian IoU 0.7:
16.2 / 10.8, 10.1 / 6.9, 1.7 / 0.5, 8.8 / 5.4
Pedestrian IoU 0.5:
22.0 / 22.0, 15.9 / 15.9, 5.0 / 5.0, 13.8 / 13.8


2023-03-01 18:02:39,197   INFO  Result is save to /home/tz98/projects/continual-DA/downstream/OpenPCDet/output/lyft_models/pointrcnn_hindsight_p2_2staged_finetune/default/eval/eval_with_train/epoch_10/val
2023-03-01 18:02:39,197   INFO  ****************Evaluation done.*****************
2023-03-01 18:02:39,220   INFO  Epoch 10 has been evaluated
Wait 30 seconds for next check (progress: 0.0 / 0 minutes): /home/tz98/projects/continual-DA/downstream/OpenPCDet/output/lyft_models/pointrcnn_hindsight_p2_2staged_finetune/default/ckpt 2023-03-01 18:03:09,253   INFO  **********************End evaluation lyft_models/pointrcnn_hindsight_p2_2staged_finetune(default)**********************
wandb: Waiting for W&B process to finish... (success).
wandb: 
wandb: Run history:
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.5/00-30_R40 ▁
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.5/00-80_R40 ▁
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.5/30-50_R40 ▁
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.5/50-80_R40 ▁
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.7/00-30_R40 ▁
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.7/00-80_R40 ▁
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.7/30-50_R40 ▁
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.7/50-80_R40 ▁
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.5/00-30_R40 ▁
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.5/00-80_R40 ▁
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.5/30-50_R40 ▁
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.5/50-80_R40 ▁
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.7/00-30_R40 ▁
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.7/00-80_R40 ▁
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.7/30-50_R40 ▁
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.7/50-80_R40 ▁
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.5/00-30_R40 ▁
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.5/00-80_R40 ▁
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.5/30-50_R40 ▁
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.5/50-80_R40 ▁
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.7/00-30_R40 ▁
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.7/00-80_R40 ▁
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.7/30-50_R40 ▁
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.7/50-80_R40 ▁
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.5/00-30_R40 ▁
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.5/00-80_R40 ▁
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.5/30-50_R40 ▁
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.5/50-80_R40 ▁
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.7/00-30_R40 ▁
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.7/00-80_R40 ▁
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.7/30-50_R40 ▁
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.7/50-80_R40 ▁
wandb:                     eval/eval_with_train/tensorboard_val/global_step ▁
wandb:                 eval/eval_with_train/tensorboard_val/recall/rcnn_0.3 ▁
wandb:                 eval/eval_with_train/tensorboard_val/recall/rcnn_0.5 ▁
wandb:                 eval/eval_with_train/tensorboard_val/recall/rcnn_0.7 ▁
wandb:                  eval/eval_with_train/tensorboard_val/recall/roi_0.3 ▁
wandb:                  eval/eval_with_train/tensorboard_val/recall/roi_0.5 ▁
wandb:                  eval/eval_with_train/tensorboard_val/recall/roi_0.7 ▁
wandb:                                                          global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇███
wandb:                                              meta_data/learning_rate ▂▂▂▂▃▃▄▄▅▆▆▇▇███████▇▇▇▆▆▆▅▅▄▄▃▃▂▂▂▂▁▁▁▁
wandb:                                                           train/loss ▃▅▂▂▃▂▅▆▄▂▄▂▂▂▁▃▇█▂▅▄▂▁▃▁▂▂▄▃▃▃▄▁▃▁▁▂▂▃▁
wandb:                                                        train/p2_loss ▃▅▂▂▃▂▅▆▄▂▄▂▂▂▁▃▇█▂▅▄▂▁▃▁▂▂▄▃▃▃▄▁▃▁▁▂▂▃▁
wandb:                                                 train/point_loss_box ▁▄▂▇▄▄▄▇▂▂▆▂▆▄▂▅▄▁▆▅▂▂▄▂▆▇▅▄▃▂▅▂▅▃▂▃█▇▅▆
wandb:                                                 train/point_loss_cls ▂▁▂▂▃▃▃▃▂▁▂▁▄▃▂▄▂▂▃▃▂▁▃▆▄▇▃▃▆▄▅▃█▅▃▄▆█▄▆
wandb:                                       train/point_loss_cls_margin_p2 ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                                                  train/point_pos_num █▃▆▃▄▅▂▆█▆▄▅▅▂▁▆▅▅▁▅▇▄▂▆▂▆▂▆▅▄▇▄▁▃▃▃▄▆▄▅
wandb:                                               train/point_total_loss ▂▁▂▂▃▃▃▃▂▁▂▁▄▃▂▄▂▂▃▃▂▁▃▆▄▇▃▃▆▄▅▃█▅▃▄▆█▄▆
wandb:                                                      train/rcnn_loss ▂▃▁▄▄█▃▃▂▁▄▂▂▂▁▂▂▃▃▄▅▂▅▃▆▃▆▆▄▂▂▂▁▂▃▂▄█▁▃
wandb:                                                  train/rcnn_loss_cls ▂▂▂▃▂▃▁▃▂▃▅▄▂▂▁▃▃▂▂▂▇▃█▄▃▃▅▃▃▃▄▅▃▂▁▃▂▄▄▃
wandb:                                               train/rcnn_loss_corner ▄▂▃▂▁▇▁▁▃▃▄▄▅▃█▂▄▃▄▃▅▄▄▂▅▅▂▃▃▅▂▁▅▃▅▂▄▄▅▅
wandb:                                                  train/rcnn_loss_reg ▂▄▂▅▅█▅▃▂▁▃▂▂▂▂▂▂▄▄▅▃▂▃▂▆▃▆▆▄▃▂▂▁▃▄▃▅█▁▃
wandb: 
wandb: Run summary:
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.5/00-30_R40 44.56188
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.5/00-80_R40 35.63118
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.5/30-50_R40 40.26737
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.5/50-80_R40 12.63454
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.7/00-30_R40 18.64154
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.7/00-80_R40 8.86686
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.7/30-50_R40 4.69703
wandb:         eval/eval_with_train/tensorboard_val/Car_3d_iou0.7/50-80_R40 1.96941
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.5/00-30_R40 47.73991
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.5/00-80_R40 38.35085
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.5/30-50_R40 42.90664
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.5/50-80_R40 14.97938
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.7/00-30_R40 38.67323
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.7/00-80_R40 28.40718
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.7/30-50_R40 29.89032
wandb:        eval/eval_with_train/tensorboard_val/Car_bev_iou0.7/50-80_R40 9.11962
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.5/00-30_R40 22.04766
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.5/00-80_R40 13.80543
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.5/30-50_R40 15.88957
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.5/50-80_R40 5.02788
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.7/00-30_R40 10.77218
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.7/00-80_R40 5.38971
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.7/30-50_R40 6.88117
wandb:  eval/eval_with_train/tensorboard_val/Pedestrian_3d_iou0.7/50-80_R40 0.50038
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.5/00-30_R40 22.04766
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.5/00-80_R40 13.80543
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.5/30-50_R40 15.88957
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.5/50-80_R40 5.02788
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.7/00-30_R40 16.24634
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.7/00-80_R40 8.76159
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.7/30-50_R40 10.14453
wandb: eval/eval_with_train/tensorboard_val/Pedestrian_bev_iou0.7/50-80_R40 1.74343
wandb:                     eval/eval_with_train/tensorboard_val/global_step 10
wandb:                 eval/eval_with_train/tensorboard_val/recall/rcnn_0.3 0.54588
wandb:                 eval/eval_with_train/tensorboard_val/recall/rcnn_0.5 0.46666
wandb:                 eval/eval_with_train/tensorboard_val/recall/rcnn_0.7 0.23879
wandb:                  eval/eval_with_train/tensorboard_val/recall/roi_0.3 0.54106
wandb:                  eval/eval_with_train/tensorboard_val/recall/roi_0.5 0.41861
wandb:                  eval/eval_with_train/tensorboard_val/recall/roi_0.7 0.14961
wandb:                                                          global_step 14850
wandb:                                              meta_data/learning_rate 0.0
wandb:                                                           train/loss 0.05293
wandb:                                                        train/p2_loss 0.05293
wandb:                                                 train/point_loss_box 1.23455
wandb:                                                 train/point_loss_cls 0.27258
wandb:                                       train/point_loss_cls_margin_p2 0.0
wandb:                                                  train/point_pos_num 1862.0
wandb:                                               train/point_total_loss 0.27258
wandb:                                                      train/rcnn_loss 0.49875
wandb:                                                  train/rcnn_loss_cls 0.12943
wandb:                                               train/rcnn_loss_corner 0.05947
wandb:                                                  train/rcnn_loss_reg 0.30986
wandb: 
wandb: Synced lyft_models_pointrcnn_hindsight_p2_2staged_finetune_default: https://wandb.ai/travis10/pointrcnn_hindsight_p2_2staged_finetune/runs/1bpkm1vf
wandb: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 2 other file(s)
wandb: Find logs at: ./wandb/run-20230301_133935-1bpkm1vf/logs
INFO:torch.distributed.elastic.agent.server.api:[default] worker group successfully finished. Waiting 300 seconds for other agents to finish.
INFO:torch.distributed.elastic.agent.server.api:Local worker group finished (SUCCEEDED). Waiting 300 seconds for other agents to finish
/home/tz98/anaconda3/envs/continual-da/lib/python3.8/site-packages/torch/distributed/elastic/utils/store.py:70: FutureWarning: This is an experimental API and will be changed in future.
  warnings.warn(
INFO:torch.distributed.elastic.agent.server.api:Done waiting for other agents. Elapsed: 0.0007727146148681641 seconds
{"name": "torchelastic.worker.status.SUCCEEDED", "source": "WORKER", "timestamp": 0, "metadata": {"run_id": "none", "global_rank": 0, "group_rank": 0, "worker_id": "782705", "role": "default", "hostname": "nikola-compute-15.cs.cornell.edu", "state": "SUCCEEDED", "total_run_time": 15843, "rdzv_backend": "static", "raw_error": null, "metadata": "{\"group_world_size\": 1, \"entry_point\": \"python\", \"local_rank\": [0], \"role_rank\": [0], \"role_world_size\": [4]}", "agent_restarts": 0}}
{"name": "torchelastic.worker.status.SUCCEEDED", "source": "WORKER", "timestamp": 0, "metadata": {"run_id": "none", "global_rank": 1, "group_rank": 0, "worker_id": "782706", "role": "default", "hostname": "nikola-compute-15.cs.cornell.edu", "state": "SUCCEEDED", "total_run_time": 15843, "rdzv_backend": "static", "raw_error": null, "metadata": "{\"group_world_size\": 1, \"entry_point\": \"python\", \"local_rank\": [1], \"role_rank\": [1], \"role_world_size\": [4]}", "agent_restarts": 0}}
{"name": "torchelastic.worker.status.SUCCEEDED", "source": "WORKER", "timestamp": 0, "metadata": {"run_id": "none", "global_rank": 2, "group_rank": 0, "worker_id": "782707", "role": "default", "hostname": "nikola-compute-15.cs.cornell.edu", "state": "SUCCEEDED", "total_run_time": 15843, "rdzv_backend": "static", "raw_error": null, "metadata": "{\"group_world_size\": 1, \"entry_point\": \"python\", \"local_rank\": [2], \"role_rank\": [2], \"role_world_size\": [4]}", "agent_restarts": 0}}
{"name": "torchelastic.worker.status.SUCCEEDED", "source": "WORKER", "timestamp": 0, "metadata": {"run_id": "none", "global_rank": 3, "group_rank": 0, "worker_id": "782708", "role": "default", "hostname": "nikola-compute-15.cs.cornell.edu", "state": "SUCCEEDED", "total_run_time": 15843, "rdzv_backend": "static", "raw_error": null, "metadata": "{\"group_world_size\": 1, \"entry_point\": \"python\", \"local_rank\": [3], \"role_rank\": [3], \"role_world_size\": [4]}", "agent_restarts": 0}}
{"name": "torchelastic.worker.status.SUCCEEDED", "source": "AGENT", "timestamp": 0, "metadata": {"run_id": "none", "global_rank": null, "group_rank": 0, "worker_id": null, "role": "default", "hostname": "nikola-compute-15.cs.cornell.edu", "state": "SUCCEEDED", "total_run_time": 15843, "rdzv_backend": "static", "raw_error": null, "metadata": "{\"group_world_size\": 1, \"entry_point\": \"python\"}", "agent_restarts": 0}}
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
